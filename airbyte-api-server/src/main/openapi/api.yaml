openapi: 3.0.2
x-stoplight:
  id: lo4tdzk9jxjfa
info:
  title: Airbyte API
  version: 1.0.0
paths:
  "/connections/{connectionId}/sync":
    post:
      tags:
        - connection
        - RPC
      responses:
        "200":
          description: Successful operation
        "403":
          $ref: "#/components/responses/NotAuthorizedResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
      operationId: syncConnection
      summary: Trigger a manual sync of the connection
    #      security:
    #        - bearerAuth: [ ]
    parameters:
      - name: connectionId
        schema:
          format: uuid
          type: string
        in: path
        required: true
      - name: X-Endpoint-API-UserInfo
        in: header
        schema:
          type: string
        description: an authorization header
        required: false
  #      - name: Authorization
  #        in: header
  #        schema:
  #          type: string
  ##          format: jwt
  #        description: an authorization header
  #        required: true
  ##        type: string
  "/connections/{connectionId}/reset":
    post:
      tags:
        - connection
        - RPC
      responses:
        "200":
          description: Successful operation
        "403":
          $ref: "#/components/responses/NotAuthorizedResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
      operationId: resetConnection
      summary: Reset the data for the connection.
      description: Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
    parameters:
      - name: connectionId
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /connections:
    get:
      tags:
        - connection
      parameters:
        - name: identifiers
          description: ""
          schema:
            $ref: "#/components/schemas/Identifier"
          in: query
        - name: workspaceId
          description: ""
          schema:
            format: uuid
            type: string
          in: query
        - name: slug
          description: ""
          schema:
            type: string
          in: query
        - name: cursor
          description: ""
          schema:
            format: base64
            type: string
          in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionList"
          description: Successful operation
        "403":
          $ref: "#/components/responses/NotAuthorizedResponse"
      operationId: listConnectionsForWorkspace
      summary: Returns filtered connections for a workspace.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionCreate"
        required: true
      tags:
        - connection
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
          description: Successful operation
        "403":
          $ref: "#/components/responses/NotAuthorizedResponse"
        "422":
          $ref: "#/components/responses/InvalidInputResponse"
      operationId: createConnection
      summary: Create a connection between a source and a destination
components:
  schemas:
    NotAuthorizedExceptionInfo:
      required:
        - message
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        exceptionClassName:
          type: string
        exceptionStack:
          type: array
          items:
            type: string
        rootCauseExceptionClassName:
          type: string
        rootCauseExceptionStack:
          type: array
          items:
            type: string
    InvalidInputExceptionInfo:
      required:
        - message
        - validationErrors
      type: object
      properties:
        message:
          type: string
        exceptionClassName:
          type: string
        exceptionStack:
          type: array
          items:
            type: string
        validationErrors:
          type: array
          items:
            $ref: "#/components/schemas/InvalidInputProperty"
    InvalidInputProperty:
      required:
        - propertyPath
      type: object
      properties:
        propertyPath:
          type: string
        invalidValue:
          type: string
        message:
          type: string
    WorkspaceUpdate:
      type: object
      allOf:
        - type: object
          properties:
            email:
              format: email
              type: string
            name:
              type: string
        - $ref: "#/components/schemas/Resource"
    NotFoundKnownExceptionInfo:
      required:
        - message
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        exceptionClassName:
          type: string
        exceptionStack:
          type: array
          items:
            type: string
        rootCauseExceptionClassName:
          type: string
        rootCauseExceptionStack:
          type: array
          items:
            type: string
    WorkspaceList:
      type: object
      allOf:
        - required:
            - workspaces
          type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/Workspace"
        - $ref: "#/components/schemas/SearchResults"
    WorkspaceCreate:
      type: object
      allOf:
        - required:
            - name
          type: object
          properties:
            email:
              format: email
              type: string
            name:
              type: string
        - $ref: "#/components/schemas/Resource"
    Identifier:
      description: ""
      required:
        - namespace
        - value
      type: object
      properties:
        namespace:
          description: ""
          type: string
        value:
          description: ""
          type: string
      example:
        namespace: "urn:organization:unit:project:resource:id"
        value: 7671f726-3639-11ed-a261-0242ac120002
    ConnectionList:
      type: object
      allOf:
        - required:
            - workspaces
          type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/Connection"
        - $ref: "#/components/schemas/SearchResults"
    Connection:
      type: object
      allOf:
        - required:
            - sourceId
            - destinationId
            - status
          type: object
          properties:
            name:
              description: Optional name of the connection
              type: string
            namespaceDefinition:
              $ref: "#/components/schemas/NamespaceDefinitionType"
            namespaceFormat:
              description: 'Used when namespaceDefinition is ''customformat''. If blank then behaves like namespaceDefinition = ''destination''. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = ''source''.'
              type: string
              example: "${SOURCE_NAMESPACE}"
            prefix:
              description: Prefix that will be prepended to the name of each stream when it is written to the destination.
              type: string
            sourceId:
              format: uuid
              type: string
            destinationId:
              format: uuid
              type: string
            schedule:
              $ref: "#/components/schemas/ConnectionSchedule"
            scheduleType:
              $ref: "#/components/schemas/ConnectionScheduleType"
            scheduleData:
              $ref: "#/components/schemas/ConnectionScheduleData"
            status:
              $ref: "#/components/schemas/ConnectionStatus"
        - $ref: "#/components/schemas/Resource"
    ConnectionSchedule:
      description: "if null, then no schedule is set."
      required:
        - units
        - timeUnit
      type: object
      properties:
        units:
          format: int64
          type: integer
        timeUnit:
          enum:
            - minutes
            - hours
            - days
            - weeks
            - months
          type: string
    ConnectionScheduleData:
      description: "schedule for when the the connection should run, per the schedule type"
      type: object
      properties:
        basicSchedule:
          required:
            - timeUnit
            - units
          type: object
          properties:
            timeUnit:
              enum:
                - minutes
                - hours
                - days
                - weeks
                - months
              type: string
            units:
              format: int64
              type: integer
        cron:
          required:
            - cronExpression
            - cronTimeZone
          type: object
          properties:
            cronExpression:
              type: string
            cronTimeZone:
              type: string
    ConnectionScheduleType:
      description: determine how the schedule data should be interpreted
      enum:
        - manual
        - basic
        - cron
      type: string
    NamespaceDefinitionType:
      description: Method used for computing final namespace in destination
      default: source
      enum:
        - source
        - destination
        - customformat
      type: string
    ConnectionStatus:
      description: Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
      enum:
        - active
        - inactive
        - deprecated
      type: string
    ConnectionUpdate:
      type: object
      allOf:
        - required:
            - sourceId
            - destinationId
            - status
          type: object
          properties:
            name:
              description: Optional name of the connection
              type: string
            namespaceDefinition:
              $ref: "#/components/schemas/NamespaceDefinitionType"
            namespaceFormat:
              description: 'Used when namespaceDefinition is ''customformat''. If blank then behaves like namespaceDefinition = ''destination''. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = ''source''.'
              type: string
              example: "${SOURCE_NAMESPACE}"
            prefix:
              description: Prefix that will be prepended to the name of each stream when it is written to the destination.
              type: string
            sourceId:
              format: uuid
              type: string
            destinationId:
              format: uuid
              type: string
            schedule:
              $ref: "#/components/schemas/ConnectionSchedule"
            scheduleType:
              $ref: "#/components/schemas/ConnectionScheduleType"
            scheduleData:
              $ref: "#/components/schemas/ConnectionScheduleData"
            status:
              $ref: "#/components/schemas/ConnectionStatus"
        - $ref: "#/components/schemas/Resource"
    ConnectionCreate:
      type: object
      allOf:
        - required:
            - sourceId
            - destinationId
            - status
          type: object
          properties:
            name:
              description: Optional name of the connection
              type: string
            namespaceDefinition:
              $ref: "#/components/schemas/NamespaceDefinitionType"
            namespaceFormat:
              description: 'Used when namespaceDefinition is ''customformat''. If blank then behaves like namespaceDefinition = ''destination''. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = ''source''.'
              type: string
              example: "${SOURCE_NAMESPACE}"
            prefix:
              description: Prefix that will be prepended to the name of each stream when it is written to the destination.
              type: string
            sourceId:
              format: uuid
              type: string
            destinationId:
              format: uuid
              type: string
            schedule:
              $ref: "#/components/schemas/ConnectionSchedule"
            scheduleType:
              $ref: "#/components/schemas/ConnectionScheduleType"
            scheduleData:
              $ref: "#/components/schemas/ConnectionScheduleData"
            status:
              $ref: "#/components/schemas/ConnectionStatus"
        - $ref: "#/components/schemas/Resource"
    Resource:
      description: ""
      type: object
      properties:
        id:
          format: uuid
          type: string
        identifiers:
          description: ""
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        meta:
          $ref: "#/components/schemas/Meta"
          description: ""
    Workspace:
      type: object
      allOf:
        - required:
            - id
            - customerId
            - name
            - slug
          type: object
          properties:
            customerId:
              format: uuid
              type: string
            email:
              format: email
              type: string
            name:
              type: string
            slug:
              type: string
        - $ref: "#/components/schemas/Resource"
    Meta:
      description: ""
      type: object
      properties:
        createdOn:
          format: date-time
          description: ""
          type: string
        lastUpdated:
          format: date-time
          description: ""
          type: string
        createdBy:
          description: ""
          type: string
          example: user@example.com
    Destination:
      type: object
      allOf:
        - required:
            - name
            - workspaceId
            - destinationDefinitionId
            - connectionConfiguration
          type: object
          properties:
            workspaceId:
              format: uuid
              type: string
            name:
              type: string
            destinationDefinitionId:
              format: uuid
              type: string
            connectionConfiguration:
              $ref: "#/components/schemas/DestinationConfiguration"
        - $ref: "#/components/schemas/Resource"
    DestinationConfiguration:
      description: The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
      example:
        user: charles
    DestinationList:
      description: FOog
      type: object
      allOf:
        - required:
            - workspaces
          type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/Destination"
        - $ref: "#/components/schemas/SearchResults"
    DestinationCreate:
      type: object
      allOf:
        - required:
            - name
            - workspaceId
            - destinationDefinitionId
            - connectionConfiguration
          type: object
          properties:
            workspaceId:
              format: uuid
              type: string
            name:
              type: string
            destinationDefinitionId:
              format: uuid
              type: string
            connectionConfiguration:
              $ref: "#/components/schemas/DestinationConfiguration"
        - $ref: "#/components/schemas/Resource"
    DestinationUpdate:
      type: object
      allOf:
        - required:
            - name
            - workspaceId
            - destinationDefinitionId
            - connectionConfiguration
          type: object
          properties:
            workspaceId:
              format: uuid
              type: string
            name:
              type: string
            destinationDefinitionId:
              format: uuid
              type: string
            connectionConfiguration:
              $ref: "#/components/schemas/DestinationConfiguration"
        - $ref: "#/components/schemas/Resource"
    Source:
      type: object
      allOf:
        - required:
            - sourceDefinitionId
            - sourceId
            - workspaceId
            - connectionConfiguration
            - name
            - sourceName
          type: object
          properties:
            sourceDefinitionId:
              format: uuid
              type: string
            sourceId:
              format: uuid
              type: string
            workspaceId:
              format: uuid
              type: string
            connectionConfiguration:
              $ref: "#/components/schemas/SourceConfiguration"
            name:
              type: string
            sourceName:
              type: string
        - $ref: "#/components/schemas/Resource"
    SourceConfiguration:
      description: The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.
      example:
        user: charles
    SourceList:
      type: object
      allOf:
        - required:
            - workspaces
          type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/Source"
        - $ref: "#/components/schemas/SearchResults"
    SourceCreate:
      type: object
      allOf:
        - required:
            - sourceDefinitionId
            - sourceId
            - workspaceId
            - connectionConfiguration
            - name
            - sourceName
          type: object
          properties:
            sourceDefinitionId:
              format: uuid
              type: string
            sourceId:
              format: uuid
              type: string
            workspaceId:
              format: uuid
              type: string
            connectionConfiguration:
              $ref: "#/components/schemas/SourceConfiguration"
            name:
              type: string
            sourceName:
              type: string
        - $ref: "#/components/schemas/Resource"
    SourceUpdate:
      type: object
      allOf:
        - required:
            - sourceDefinitionId
            - sourceId
            - workspaceId
            - connectionConfiguration
            - name
            - sourceName
          type: object
          properties:
            sourceDefinitionId:
              format: uuid
              type: string
            sourceId:
              format: uuid
              type: string
            workspaceId:
              format: uuid
              type: string
            connectionConfiguration:
              $ref: "#/components/schemas/SourceConfiguration"
            name:
              type: string
            sourceName:
              type: string
        - $ref: "#/components/schemas/Resource"
    SearchResults:
      description: ""
      required:
        - next
        - previous
      type: object
      properties:
        next:
          description: Cursor pointer to the next set of results
          type: string
          example: "https://api-server.io/{resource}/?next=MjAyMi0wOS0xN1QwMzoyOToxMiswMDowMA=="
        previous:
          description: ""
          type: string
          example: "https://api-server.io/{resource}/?previous=MjAyMy0xMi0yN1QwMzoyNToxMiswMDowMA=="
  responses:
    InvalidInputResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvalidInputExceptionInfo"
      description: Input failed validation
    NotAuthorizedResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotAuthorizedExceptionInfo"
      description: The request is not authorized; see message for details.
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundKnownExceptionInfo"
      description: Object with given id was not found.
    SearchResultsResponse:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/SearchResults"
      description: ""
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
security:
  - bearerAuth: []
