allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'airbyte-docker'
    apply plugin: 'airbyte-java-cdk'
    apply plugin: 'airbyte-integration-test-java'
    apply plugin: 'airbyte-performance-test-java'
    apply plugin: 'java-test-fixtures'

    group 'io.airbyte'
    version = getCdkTargetVersion()
}

subprojects { subproject ->
    def artifactBaseName = 'airbyte-cdk-' + subproject.name.replace('-feature', '')
    // E.g. airbyte-cdk-core, airbyte-cdk-db-sources, airbyte-cdk-db-destinations, etc.

    publishing {
        publications {
            main(MavenPublication) {
                groupId = 'io.airbyte'
                artifactId = artifactBaseName
                from components.java
            }
            testFixtures(MavenPublication) {
                groupId = 'io.airbyte'
                artifactId = artifactBaseName + '-test-fixtures'
                version = project.version
                artifact subproject.tasks.testFixturesJar
            }
        }
        repositories {
            maven {
                name 'cloudrepo'
                url 'https://airbyte.mycloudrepo.io/repositories/airbyte-public-jars'
                credentials {
                    username System.getenv('CLOUDREPO_USER')
                    password System.getenv('CLOUDREPO_PASSWORD')
                }
            }
        }
    }

    project.configurations {
        testImplementation.extendsFrom implementation
        testFixturesImplementation.extendsFrom implementation
        testFixturesRuntimeOnly.extendsFrom runtimeOnly
    }
}

description = "Airbyte Connector Development Kit (CDK) for Java."

assemble {
    dependsOn subprojects*.assemble
}

build {
    dependsOn subprojects*.build
}

test {
    dependsOn subprojects*.test
}

integrationTestJava {
    dependsOn subprojects*.integrationTestJava
}

publish {
    dependsOn subprojects*.publish
}

publishToMavenLocal.dependsOn subprojects*.publishToMavenLocal

// The `publishSnapshotIfNeeded` task will be a no-op if CDK version does not end with '-SNAPSHOT'.
task publishSnapshotIfNeeded {}

if (version.endsWith("-SNAPSHOT")) {
    logger.lifecycle("Version ${version} ends with '-SNAPSHOT'. Enqueing 'publishToMavenLocal'...")
    publishSnapshotIfNeeded.dependsOn publishToMavenLocal
} else {
    // Uncomment as needed for debugging:
    // logger.lifecycle("Version ${version} does not end with '-SNAPSHOT'. Skipping task 'publishToMavenLocal'.")
}
