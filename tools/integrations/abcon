#!/bin/bash

set -eo pipefail

[[ "$DEBUG" = "true" ]] && set -x

VERSION=0.0.1
CLI_NAME="${CLI_NAME:-con}"
AIRBYTE_REPO="${AIRBYTE_REPO:-https://github.com/airbytehq/airbyte.git}"

BUILD_DIR="build"
PROJECT_PATH=$(pwd)
AIRBYTE_PATH="${PROJECT_PATH}/${BUILD_DIR}"/airbyte

PROJECT_FILE=airbyte.json

PYTHON_DEFAULT=$(which python || which python3)
PIP_DEFAULT=$(which pip || which pip3)
PYTHON_CMD="${PYTHON_CMD:-${PYTHON_DEFAULT}}"
PIP_CMD="${PIP_CMD:-${PIP_DEFAULT}}"

_error() {
    echo "$@" 1>&2 && exit 1
}

_setup_airbyte() {
    (
        local build_path="$(dirname "${AIRBYTE_PATH}")"
        mkdir -p "${build_path}"

        cd "${build_path}"

        [[ -d airbyte || -L airbyte ]] || git clone "${AIRBYTE_REPO}"

        cd airbyte
        git clean -qfd # remove all untracked files
        git clean -qfdX # remove all ignored files
        git pull -q
    )
}

_setup_env() {
    [[ -d .venv ]] || "${PYTHON_CMD}" -m venv ".venv" # Create a virtual environment in the .venv directory
    source ".venv/bin/activate" # enable the venv
}

_get_connector_name() {
    grep connector_image < acceptance-test-config.yml | cut -d / -f 2 | cut -d : -f 1
}

_patch_connector() {
    echo "Patching standalone connector"

    # TODO(michel): publish package instead of editable
    if [[ -f requirements.txt ]]; then
        rm -f requirements.txt.new
        sed "
            s;\.\./\.\./\.\.;${BUILD_DIR}/airbyte;
            s;\.\./\.\.;${BUILD_DIR}/airbyte/airbyte-integrations;
            s;\.\.;${BUILD_DIR}/airbyte/airbyte-integrations/connectors;
        " requirements.txt > requirements.txt.new
        mv requirements.txt.new requirements.txt
    fi
    rm -f build.gradle
    rm -f acceptance-test-docker.sh

    mkdir -p .github/workflows
    cat <<-EOF > .github/workflows/airbyte-connector-build.yaml
name: airbyte-connector-build
on: [push]
jobs:
  build:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v4
    - name: Install
      run: ./abconw install
    - name: Check
      run: ./abconw check
    - name: Test
      run: ./abconw test
    - name: Install secrets
      env:
        AB_SECRETS_PASSPHRASE: \${{ secrets.AB_SECRETS_PASSPHRASE }}
      run: ./abconw secrets decrypt
    - name: SAT
      run: ./abconw sat -k test_config_match_spec
EOF
}

help_clean="Clean project"
cmd_clean() {
  rm -rf .venv
  rm -rf build
}

help_init="Initialize current connector project in current directory"
cmd_init() {
    [[ -f "${PROJECT_FILE}" ]] && _error "Connector already initialized"

    echo "Initializing connector"

    cp -i "${AIRBYTE_PATH}/.gitignore" .
    cp -i "${AIRBYTE_PATH}/pyproject.toml" .
    echo "3.9" > .python-version

    # TODO(michel): Remove all unnecessary generated files
    _patch_connector

    echo "{}" | jq > "${PROJECT_FILE}"
}

help_generate="Generate new connector from template"
cmd_generate() {
    echo "Generating connector"

    (
        cd "${AIRBYTE_PATH}"
        cd ./airbyte-integrations/connector-templates/generator
        ./generate.sh
        local connector_dir=$(git status --porcelain | cut -d ' ' -f2)

        shopt -s dotglob
        mv "${AIRBYTE_PATH}/${connector_dir}/"* "${PROJECT_PATH}"
    )

    # TODO(michel): Remove all unnecessary generated files
    _patch_connector
}

help_configure="Configure & install all connector dependencies"
cmd_install() {
    pip install -r requirements.txt

    pip install pyproject-flake8==0.0.1a5
    pip install black==22.3.0
    pip install mypy==0.930
    pip install isort==5.6.4
}

help_run="Run connector"
cmd_run() {
    cmd_check 1>&2

    python main.py "$@"
}

help_container_run="Run connector from within a container"
cmd_container_run() {
    local image_name="airbyte/$(_get_connector_name):dev"

    cmd_build dev

    # allow proper mounting of sample_files & secrets so it is not necessary to prepend '/'
    local docker_pwd=$(docker run --rm --entrypoint pwd "${image_name}")

    local mounts=()
    [[ -d secrets ]] && mounts+=("-v" "$(pwd)/secrets:${docker_pwd}/secrets")
    [[ -d sample_files ]] && mounts+=("-v" "$(pwd)/sample_files:${docker_pwd}/sample_files")
    [[ -d integration_tests ]] && mounts+=("-v" "$(pwd)/integration_tests:${docker_pwd}/integration_tests")

    docker run --rm \
        "${mounts[@]}" \
        "${image_name}" \
        "$@"
}

help_build="Build connector image"
cmd_build() {
    local tag=${1:-dev}
    local connector_name=$(_get_connector_name)

    cmd_check 1>&2

    docker build . -t "airbyte/${connector_name}:${tag}"
}

help_test="Run connector unit tests"
cmd_test() {
    echo "Testing connector"

    if [[ -d unit_tests ]]; then
      python -m pytest -s unit_tests
    else
      echo "'unit_tests' not present, no unit tests configured"
    fi
}

help_format="Apply style to project"
cmd_format() {
    black --config pyproject.toml .
    isort --settings-file=pyproject.toml .
}

help_check="Verify code style & types"
cmd_check() {
    black --config pyproject.toml --diff --quiet --check .
    pflake8 --config pyproject.toml .
    isort --settings-file=pyproject.toml --diff --quiet --check .
    python -m mypy --config-file pyproject.toml .
}

help_sat="Run standard acceptance tests"
cmd_sat() {
    echo "Running SAT"

    cmd_build 1>&2

    python -m pytest -p integration_tests.acceptance "$@"
}

help_container_sat="Run standard acceptance tests from container"
cmd_container_sat() {
    echo "Running SAT"

    cmd_build

    # Run
    docker run --rm -it \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v /tmp:/tmp \
        -v $(pwd):/test_input \
        airbyte/source-acceptance-test \
        --acceptance-test-config /test_input
}

help_secrets="Manage connector secrets. Subcommand: encrypt, decrypt"
cmd_secrets() {
    local cmd="$1"; shift || { echo "missing cmd"; cmd_help; exit 1; }

    mkdir -p secrets
    mkdir -p safe_secrets

    local passphrase="$AB_SECRETS_PASSPHRASE"
    local options=()
    [[ -z "${passphrase}" ]] || options+=("--passphrase-fd" "0" "--batch" "--yes")

    if [[ "$cmd" = "encrypt" ]]; then
        for f in secrets/*; do
          echo -n "${passphrase}" | gpg "${options[@]}" -o "${f//secrets/safe_secrets}.gpg" --symmetric --cipher-algo AES256 "${f}"
        done
    elif [[ "$cmd" = "decrypt" ]]; then
      for f in safe_secrets/*; do
        echo -n "${passphrase}" | gpg "${options[@]}" -o "secrets/$(basename "${f//.gpg/}")" --decrypt "${f}"
      done
    else
      _error "Invalid subcommand: $cmd"
    fi
}

help_publish="Publish connector"
cmd_publish() {
    echo "Publishing connector"
}

help_help="Display that message"
cmd_help() {
    echo
    echo "Usage:  abcon [OPTIONS] COMMAND"
    echo
    echo "A CLI to develop Airbyte connectors"
    echo
    echo "Options: None (yet)"
    echo ""
    echo "Commands:"
    while read cmd; do
        help_var="help_$cmd"
        echo -e "  $cmd@${!help_var}"
    done < <(declare -F | grep cmd_ | cut -d ' ' -f 3 | cut -d _ -f 2-) |  column -t -s @
}

main() {
    local cmd="$1"; shift || { echo "missing cmd"; cmd_help; exit 1; }

    [[ "--version" = "$cmd" ]] && { echo "$VERSION" ; exit 0; }

    _setup_airbyte
    _setup_env

    "cmd_${cmd}" "$@"
}

main "$@"
