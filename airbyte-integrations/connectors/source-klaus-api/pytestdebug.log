versions pytest-6.2.5, py-1.11.0, python-3.9.13.final.0
cwd=/Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api
args=('integration_tests', '-p', 'integration_tests.acceptance', '--last-failed', '--debug')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x101428190>
    pytest_plugin_registered [hook]
        plugin: <Session airbyte exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x100514850>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x101428190>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPluginCollWrapper object at 0x1033b5eb0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x1033b5850>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x1033b5cd0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_configure [hook]
          config: <_pytest.config.Config object at 0x101428190>
      finish pytest_configure --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x1033e39a0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
    early skip of rewriting module: fancycompleter [assertion]
    early skip of rewriting module: rlcompleter [assertion]
    early skip of rewriting module: readline [assertion]
    early skip of rewriting module: cmd [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x100514850>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x101428190>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'integration_tests.acceptance' from '/Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/acceptance.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'connector_acceptance_test.plugin' from '/Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_hypothesis_pytestplugin' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_hypothesis_pytestplugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'requests_mock.contrib._pytest_plugin' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/requests_mock/contrib/_pytest_plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_mock' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_mock/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_sugar' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_sugar.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_timeout' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_timeout.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='no' _global_capturing=<MultiCapture out=None err=None in_=None _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPluginCollWrapper object at 0x1033b5eb0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x1033b5850>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x1033b5cd0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x1033e39a0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x1033e3e50>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x103463e50>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x100514850>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x101428190>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'integration_tests.acceptance' from '/Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/acceptance.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'connector_acceptance_test.plugin' from '/Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_hypothesis_pytestplugin' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_hypothesis_pytestplugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'requests_mock.contrib._pytest_plugin' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/requests_mock/contrib/_pytest_plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_mock' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_mock/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_sugar' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_sugar.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_timeout' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_timeout.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='no' _global_capturing=<MultiCapture out=None err=None in_=None _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPluginCollWrapper object at 0x1033b5eb0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x1033b5850>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x1033b5cd0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x1033e39a0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x1033e3e50>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x103463e50>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_sugar.SugarTerminalReporter object at 0x1034c0400>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x101428190>
          startdir: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api
      matched marked file 'hypothesis' (from 'hypothesis') [assertion]
      find_module called for: hypothesis [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/__init__.py [assertion]
      matched marked file 'hypothesis._error_if_old' (from 'hypothesis') [assertion]
      find_module called for: hypothesis._error_if_old [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/_error_if_old.py [assertion]
      matched marked file 'hypothesis.version' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.version [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/version.py [assertion]
      matched marked file 'hypothesis._settings' (from 'hypothesis') [assertion]
      find_module called for: hypothesis._settings [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/_settings.py [assertion]
      matched marked file 'hypothesis.errors' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.errors [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/errors.py [assertion]
      matched marked file 'hypothesis.internal' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/__init__.py [assertion]
      matched marked file 'hypothesis.internal.reflection' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.reflection [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/reflection.py [assertion]
      matched marked file 'hypothesis.internal.compat' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.compat [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/compat.py [assertion]
      matched marked file 'hypothesis.utils' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.utils [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/utils/__init__.py [assertion]
      matched marked file 'hypothesis.utils.conventions' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.utils.conventions [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/utils/conventions.py [assertion]
      matched marked file 'hypothesis.vendor' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.vendor [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/vendor/__init__.py [assertion]
      matched marked file 'hypothesis.vendor.pretty' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.vendor.pretty [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/vendor/pretty.py [assertion]
      matched marked file 'hypothesis.internal.validation' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.validation [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/validation.py [assertion]
      matched marked file 'hypothesis.internal.coverage' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.coverage [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/coverage.py [assertion]
      matched marked file 'hypothesis.utils.dynamicvariables' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.utils.dynamicvariables [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/utils/dynamicvariables.py [assertion]
      matched marked file 'hypothesis.control' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.control [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/control.py [assertion]
      matched marked file 'hypothesis.internal.conjecture' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/__init__.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.data' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.data [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/data.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.junkdrawer' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.junkdrawer [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/junkdrawer.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.utils' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.utils [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/utils.py [assertion]
      matched marked file 'hypothesis.internal.floats' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.floats [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/floats.py [assertion]
      matched marked file 'hypothesis.reporting' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.reporting [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/reporting.py [assertion]
      matched marked file 'hypothesis.core' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.core [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/core.py [assertion]
      matched marked file 'hypothesis.strategies' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/__init__.py [assertion]
      matched marked file 'hypothesis.strategies._internal' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/__init__.py [assertion]
      matched marked file 'hypothesis.strategies._internal.strategies' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.strategies [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/strategies.py [assertion]
      matched marked file 'hypothesis.internal.lazyformat' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.lazyformat [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/lazyformat.py [assertion]
      matched marked file 'hypothesis.strategies._internal.utils' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.utils [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/utils.py [assertion]
      matched marked file 'hypothesis.internal.cache' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.cache [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/cache.py [assertion]
      matched marked file 'hypothesis.strategies._internal.collections' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.collections [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/collections.py [assertion]
      matched marked file 'hypothesis.strategies._internal.lazy' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.lazy [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/lazy.py [assertion]
      matched marked file 'hypothesis.strategies._internal.core' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.core [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/core.py [assertion]
      early skip of rewriting module: fractions [assertion]
      matched marked file 'hypothesis.internal.cathetus' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.cathetus [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/cathetus.py [assertion]
      matched marked file 'hypothesis.internal.charmap' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.charmap [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/charmap.py [assertion]
      early skip of rewriting module: gzip [assertion]
      matched marked file 'hypothesis.configuration' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.configuration [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/configuration.py [assertion]
      matched marked file 'hypothesis.internal.entropy' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.entropy [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/entropy.py [assertion]
      matched marked file 'hypothesis.strategies._internal.deferred' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.deferred [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/deferred.py [assertion]
      matched marked file 'hypothesis.strategies._internal.functions' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.functions [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/functions.py [assertion]
      matched marked file 'hypothesis.strategies._internal.misc' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.misc [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/misc.py [assertion]
      matched marked file 'hypothesis.strategies._internal.numbers' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.numbers [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/numbers.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.floats' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.floats [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/floats.py [assertion]
      matched marked file 'hypothesis.internal.filtering' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.filtering [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/filtering.py [assertion]
      matched marked file 'hypothesis.strategies._internal.recursive' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.recursive [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/recursive.py [assertion]
      matched marked file 'hypothesis.strategies._internal.shared' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.shared [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/shared.py [assertion]
      matched marked file 'hypothesis.strategies._internal.strings' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.strings [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/strings.py [assertion]
      matched marked file 'hypothesis.internal.intervalsets' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.intervalsets [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/intervalsets.py [assertion]
      matched marked file 'hypothesis.strategies._internal.datetime' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.datetime [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/datetime.py [assertion]
      early skip of rewriting module: zoneinfo [assertion]
      early skip of rewriting module: zoneinfo._tzpath [assertion]
      early skip of rewriting module: zoneinfo._common [assertion]
      early skip of rewriting module: _zoneinfo [assertion]
      matched marked file 'hypothesis.strategies._internal.ipaddress' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.ipaddress [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/ipaddress.py [assertion]
      matched marked file 'hypothesis.executors' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.executors [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/executors.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.engine' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.engine [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/engine.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.datatree' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.datatree [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/datatree.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.pareto' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.pareto [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/pareto.py [assertion]
      early skip of rewriting module: sortedcontainers [assertion]
      early skip of rewriting module: sortedcontainers.sortedlist [assertion]
      early skip of rewriting module: sortedcontainers.sortedset [assertion]
      early skip of rewriting module: sortedcontainers.sorteddict [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinker' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinker [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/shrinker.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.choicetree' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.choicetree [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/choicetree.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/shrinking/__init__.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking.floats' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking.floats [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/shrinking/floats.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking.common' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking.common [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/shrinking/common.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking.integer' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking.integer [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/shrinking/integer.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking.lexical' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking.lexical [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/shrinking/lexical.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking.ordering' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking.ordering [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/shrinking/ordering.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking.learned_dfas' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking.learned_dfas [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/shrinking/learned_dfas.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.dfa' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.dfa [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/dfa/__init__.py [assertion]
      matched marked file 'hypothesis.internal.healthcheck' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.healthcheck [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/healthcheck.py [assertion]
      matched marked file 'hypothesis.internal.escalation' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.escalation [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/escalation.py [assertion]
      matched marked file 'hypothesis.internal.scrutineer' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.scrutineer [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/scrutineer.py [assertion]
      matched marked file 'hypothesis.statistics' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.statistics [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/statistics.py [assertion]
      early skip of rewriting module: statistics [assertion]
      early skip of rewriting module: _statistics [assertion]
      matched marked file 'hypothesis.entry_points' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.entry_points [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/entry_points.py [assertion]
      early skip of rewriting module: pydantic._hypothesis_plugin [assertion]
      early skip of rewriting module: email_validator [assertion]
      matched marked file 'hypothesis.strategies._internal.types' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.types [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/types.py [assertion]
      early skip of rewriting module: numpy [assertion]
      matched marked file 'hypothesis.strategies._internal.regex' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.regex [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/regex.py [assertion]
      matched marked file 'hypothesis.strategies._internal.flatmapped' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.flatmapped [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/flatmapped.py [assertion]
      matched marked file 'hypothesis.database' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.database [assertion]
      found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/database.py [assertion]
      finish pytest_report_header --> [['rootdir: /Users/Deke/Projets/github/airbyte, configfile: pytest.ini', 'plugins: hypothesis-6.54.6, requests-mock-1.9.3, mock-3.6.1, sugar-0.9.7, timeout-1.4.2, cov-3.0.0'], "hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/.hypothesis/examples')", 'cachedir: .pytest_cache', ['using: pytest-6.2.5 pylib-1.11.0', 'setuptools registered plugins:', '  hypothesis-6.54.6 at /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_hypothesis_pytestplugin.py', '  requests-mock-1.9.3 at /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/requests_mock/contrib/_pytest_plugin.py', '  pytest-mock-3.6.1 at /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_mock/__init__.py', '  pytest-sugar-0.9.7 at /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_sugar.py', '  pytest-timeout-1.4.2 at /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_timeout.py', '  pytest-cov-3.0.0 at /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_cov/plugin.py']] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x100514850>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x101428190>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'integration_tests.acceptance' from '/Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/acceptance.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'connector_acceptance_test.plugin' from '/Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_hypothesis_pytestplugin' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_hypothesis_pytestplugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'requests_mock.contrib._pytest_plugin' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/requests_mock/contrib/_pytest_plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_mock' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_mock/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_sugar' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_sugar.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_timeout' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_timeout.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='no' _global_capturing=<MultiCapture out=None err=None in_=None _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPluginCollWrapper object at 0x1033b5eb0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x1033b5850>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x1033b5cd0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x1033e39a0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x1033e3e50>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x103463e50>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_sugar.SugarTerminalReporter object at 0x1034c0400>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x1031f7df0>
          manager: <_pytest.config.PytestPluginManager object at 0x100514850>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['integration_tests', '/Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests'] [collection]
        pytest_collectstart [hook]
            collector: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (local('/Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests'), []) [collection]
            pytest_ignore_collect [hook]
                path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/__init__.py
                config: <_pytest.config.Config object at 0x101428190>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/__init__.py
                parent: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/__init__.py
                  parent: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package integration_tests> [hook]
            finish pytest_collect_file --> [<Package integration_tests>] [hook]
            pytest_ignore_collect [hook]
                path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/__init__.py
                config: <_pytest.config.Config object at 0x101428190>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/__init__.py
                parent: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/__init__.py
                  parent: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package integration_tests> [hook]
            finish pytest_collect_file --> [<Package integration_tests>] [hook]
        processing argument (local('/Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests'), []) [collection]
          find_module called for: connector_acceptance_test.conftest [assertion]
          rewriting conftest file: '/Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/conftest.py' [assertion]
          found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/conftest.py [assertion]
          find_module called for: connector_acceptance_test.tests [assertion]
          find_module called for: connector_acceptance_test.tests.test_core [assertion]
          matched test file '/Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py' [assertion]
          found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py [assertion]
          early skip of rewriting module: xmlrpc [assertion]
          early skip of rewriting module: xmlrpc.client [assertion]
          early skip of rewriting module: xml.parsers [assertion]
          early skip of rewriting module: xml.parsers.expat [assertion]
          early skip of rewriting module: connector_acceptance_test.utils.backward_compatibility [assertion]
          early skip of rewriting module: deepdiff [assertion]
          early skip of rewriting module: deepdiff.diff [assertion]
          early skip of rewriting module: ordered_set [assertion]
          early skip of rewriting module: deepdiff.helper [assertion]
          early skip of rewriting module: numpy [assertion]
          early skip of rewriting module: deepdiff.serialization [assertion]
          early skip of rewriting module: toml [assertion]
          early skip of rewriting module: toml.encoder [assertion]
          early skip of rewriting module: toml.decoder [assertion]
          early skip of rewriting module: toml.tz [assertion]
          early skip of rewriting module: clevercsv [assertion]
          early skip of rewriting module: deepdiff.model [assertion]
          early skip of rewriting module: jsonpickle [assertion]
          early skip of rewriting module: deepdiff.distance [assertion]
          early skip of rewriting module: deepdiff.deephash [assertion]
          early skip of rewriting module: deepdiff.base [assertion]
          early skip of rewriting module: deepdiff.lfucache [assertion]
          early skip of rewriting module: deepdiff.search [assertion]
          early skip of rewriting module: deepdiff.delta [assertion]
          early skip of rewriting module: deepdiff.path [assertion]
          early skip of rewriting module: deepdiff.anyset [assertion]
          early skip of rewriting module: hypothesis_jsonschema [assertion]
          early skip of rewriting module: hypothesis_jsonschema._from_schema [assertion]
          matched marked file 'hypothesis.provisional' (from 'hypothesis') [assertion]
          find_module called for: hypothesis.provisional [assertion]
          found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/provisional.py [assertion]
          early skip of rewriting module: hypothesis_jsonschema._canonicalise [assertion]
          early skip of rewriting module: hypothesis_jsonschema._encode [assertion]
          early skip of rewriting module: hypothesis_jsonschema._resolve [assertion]
          matched marked file 'hypothesis.internal.detection' (from 'hypothesis') [assertion]
          find_module called for: hypothesis.internal.detection [assertion]
          found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/hypothesis/internal/detection.py [assertion]
          find_module called for: connector_acceptance_test.tests.test_full_refresh [assertion]
          matched test file '/Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_full_refresh.py' [assertion]
          found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_full_refresh.py [assertion]
          find_module called for: connector_acceptance_test.tests.test_incremental [assertion]
          matched test file '/Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py' [assertion]
          found cached rewritten pyc for /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py [assertion]
          loading conftestmodule <module 'connector_acceptance_test.conftest' from '/Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/conftest.py'> [pluginmanage]
            pytest_plugin_registered [hook]
                plugin: <module 'connector_acceptance_test.conftest' from '/Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/conftest.py'>
                manager: <_pytest.config.PytestPluginManager object at 0x100514850>
            finish pytest_plugin_registered --> [] [hook]
            pytest_ignore_collect [hook]
                path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/__init__.py
                config: <_pytest.config.Config object at 0x101428190>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/__init__.py
                parent: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/__init__.py
                  parent: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package tests> [hook]
            finish pytest_collect_file --> [<Package tests>] [hook]
            pytest_ignore_collect [hook]
                path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/__init__.py
                config: <_pytest.config.Config object at 0x101428190>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/__init__.py
                parent: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/__init__.py
                  parent: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package connector_acceptance_test> [hook]
            finish pytest_collect_file --> [<Package connector_acceptance_test>] [hook]
            pytest_ignore_collect [hook]
                path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/__init__.py
                config: <_pytest.config.Config object at 0x101428190>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/__init__.py
                parent: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/__init__.py
                  parent: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package tests> [hook]
            finish pytest_collect_file --> [<Package tests>] [hook]
            pytest_ignore_collect [hook]
                path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/.hypothesis
                config: <_pytest.config.Config object at 0x101428190>
            finish pytest_ignore_collect --> None [hook]
          early skip of rewriting module: py._code [assertion]
          early skip of rewriting module: py._code.code [assertion]
          early skip of rewriting module: repr [assertion]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=2 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=2 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package integration_tests> [collection]
      pytest_collectstart [hook]
          collector: <Package integration_tests>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package integration_tests>
        pytest_ignore_collect [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/abnormal_state.json
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/abnormal_state.json
            parent: <Package integration_tests>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/acceptance.py
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/acceptance.py
            parent: <Package integration_tests>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/configured_catalog.json
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/configured_catalog.json
            parent: <Package integration_tests>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/configured_catalog_inc.json
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/configured_catalog_inc.json
            parent: <Package integration_tests>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/expected_records.jsonl
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/expected_records.jsonl
            parent: <Package integration_tests>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/invalid_config.json
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/invalid_config.json
            parent: <Package integration_tests>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/sample_config.json
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/sample_config.json
            parent: <Package integration_tests>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/sample_state.json
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/sample_state.json
            parent: <Package integration_tests>
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/connectors/source-klaus-api/integration_tests/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/connectors/source-klaus-api/integration_tests/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package tests> [collection]
      pytest_collectstart [hook]
          collector: <Package tests>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package tests>
        pytest_ignore_collect [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/.coverage
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/.coverage
            parent: <Package tests>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py
            parent: <Package tests>
          pytest_pycollect_makemodule [hook]
              path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py
              parent: <Package tests>
          finish pytest_pycollect_makemodule --> <Module test_core.py> [hook]
        finish pytest_collect_file --> [<Module test_core.py>] [hook]
        pytest_ignore_collect [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_full_refresh.py
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_full_refresh.py
            parent: <Package tests>
          pytest_pycollect_makemodule [hook]
              path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_full_refresh.py
              parent: <Package tests>
          finish pytest_pycollect_makemodule --> <Module test_full_refresh.py> [hook]
        finish pytest_collect_file --> [<Module test_full_refresh.py>] [hook]
        pytest_ignore_collect [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py
            parent: <Package tests>
          pytest_pycollect_makemodule [hook]
              path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py
              parent: <Package tests>
          finish pytest_pycollect_makemodule --> <Module test_incremental.py> [hook]
        finish pytest_collect_file --> [<Module test_incremental.py>] [hook]
        pytest_ignore_collect [hook]
            path: /Users/Deke/Projets/github/airbyte/airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/.hypothesis
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_ignore_collect --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/__init__.py' lenresult=3 outcome='passed'> [hook]
    genitems <Module test_core.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_core.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_core.py>
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: functools
            obj: <module 'functools' from '/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/functools.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: json
            obj: <module 'json' from '/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: logging
            obj: <module 'logging' from '/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/logging/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: re
            obj: <module 're' from '/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/re.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: Counter
            obj: <class 'collections.Counter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: defaultdict
            obj: <class 'collections.defaultdict'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: reduce
            obj: <built-in function reduce>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: Logger
            obj: <class 'logging.Logger'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: Any
            obj: typing.Any
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: Dict
            obj: typing.Dict
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: Mapping
            obj: typing.Mapping
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: MutableMapping
            obj: typing.MutableMapping
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: Optional
            obj: typing.Optional
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: Set
            obj: typing.Set
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: Tuple
            obj: typing.Tuple
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: Boolean
            obj: <class 'bool'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: dpath
            obj: <module 'dpath' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/dpath/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: jsonschema
            obj: <module 'jsonschema' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/jsonschema/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: pytest
            obj: <module 'pytest' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: AirbyteRecordMessage
            obj: <class 'airbyte_protocol.models.airbyte_protocol.AirbyteRecordMessage'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: AirbyteStream
            obj: <class 'airbyte_protocol.models.airbyte_protocol.AirbyteStream'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: AirbyteTraceMessage
            obj: <class 'airbyte_protocol.models.airbyte_protocol.AirbyteTraceMessage'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: ConfiguredAirbyteCatalog
            obj: <class 'airbyte_protocol.models.airbyte_protocol.ConfiguredAirbyteCatalog'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: ConfiguredAirbyteStream
            obj: <class 'airbyte_protocol.models.airbyte_protocol.ConfiguredAirbyteStream'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: ConnectorSpecification
            obj: <class 'airbyte_protocol.models.airbyte_protocol.ConnectorSpecification'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: Status
            obj: <enum 'Status'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: SyncMode
            obj: <enum 'SyncMode'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: TraceType
            obj: <enum 'TraceType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: Type
            obj: <enum 'Type'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: BaseTest
            obj: <class 'connector_acceptance_test.base.BaseTest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: BasicReadTestConfig
            obj: <class 'connector_acceptance_test.config.BasicReadTestConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: Config
            obj: <class 'connector_acceptance_test.config.Config'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: ConnectionTestConfig
            obj: <class 'connector_acceptance_test.config.ConnectionTestConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: DiscoveryTestConfig
            obj: <class 'connector_acceptance_test.config.DiscoveryTestConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: EmptyStreamConfiguration
            obj: <class 'connector_acceptance_test.config.EmptyStreamConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: ExpectedRecordsConfig
            obj: <class 'connector_acceptance_test.config.ExpectedRecordsConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: IgnoredFieldsConfiguration
            obj: <class 'connector_acceptance_test.config.IgnoredFieldsConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: SpecTestConfig
            obj: <class 'connector_acceptance_test.config.SpecTestConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: ConnectorRunner
            obj: <class 'connector_acceptance_test.utils.connector_runner.ConnectorRunner'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: SecretDict
            obj: <class 'connector_acceptance_test.utils.common.SecretDict'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: delete_fields
            obj: <function delete_fields at 0x102eaa280>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: filter_output
            obj: <function filter_output at 0x102e43940>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: make_hashable
            obj: <function make_hashable at 0x102eaa550>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: verify_records_schema
            obj: <function verify_records_schema at 0x102e43550>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: CatalogDiffChecker
            obj: <class 'connector_acceptance_test.utils.backward_compatibility.CatalogDiffChecker'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: SpecDiffChecker
            obj: <class 'connector_acceptance_test.utils.backward_compatibility.SpecDiffChecker'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: validate_previous_configs
            obj: <function validate_previous_configs at 0x103a24160>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: build_configured_catalog_from_custom_catalog
            obj: <function build_configured_catalog_from_custom_catalog at 0x102e43d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: build_configured_catalog_from_discovered_catalog_and_empty_streams
            obj: <function build_configured_catalog_from_discovered_catalog_and_empty_streams at 0x102e43ca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: find_all_values_for_key_in_schema
            obj: <function find_all_values_for_key_in_schema at 0x102e43c10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: find_keyword_schema
            obj: <function find_keyword_schema at 0x102e439d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: JsonSchemaHelper
            obj: <class 'connector_acceptance_test.utils.json_schema_helper.JsonSchemaHelper'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: get_expected_schema_structure
            obj: <function get_expected_schema_structure at 0x1031480d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: get_object_structure
            obj: <function get_object_structure at 0x103140940>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: flatten
            obj: <function flatten at 0x102639040>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: connector_spec_dict_fixture
            obj: <function connector_spec_dict_fixture at 0x103a1fd30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: secret_property_names_fixture
            obj: <function secret_property_names_fixture at 0x103b1d5e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: DATE_PATTERN
            obj: ^[0-9]{2}-[0-9]{2}-[0-9]{4}$
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: DATETIME_PATTERN
            obj: ^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2})?$
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: TestSpec
            obj: <class 'connector_acceptance_test.tests.test_core.TestSpec'>
        finish pytest_pycollect_makeitem --> <Class TestSpec> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: TestConnection
            obj: <class 'connector_acceptance_test.tests.test_core.TestConnection'>
        finish pytest_pycollect_makeitem --> <Class TestConnection> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: TestDiscovery
            obj: <class 'connector_acceptance_test.tests.test_core.TestDiscovery'>
        finish pytest_pycollect_makeitem --> <Class TestDiscovery> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: primary_keys_for_records
            obj: <function primary_keys_for_records at 0x103b1d700>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_core.py>
            name: TestBasicRead
            obj: <class 'connector_acceptance_test.tests.test_core.TestBasicRead'>
        finish pytest_pycollect_makeitem --> <Class TestBasicRead> [hook]
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py' lenresult=4 outcome='passed'> [hook]
    genitems <Class TestSpec> [collection]
      pytest_collectstart [hook]
          collector: <Class TestSpec>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestSpec>
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestSpec' lenresult=1 outcome='passed'> [hook]
    genitems <Instance ()> [collection]
      pytest_collectstart [hook]
          collector: <Instance ()>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance ()>
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __annotations__
            obj: {'spec_cache': <class 'airbyte_protocol.models.airbyte_protocol.ConnectorSpecification'>, 'previous_spec_cache': <class 'airbyte_protocol.models.airbyte_protocol.ConnectorSpecification'>}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: spec_cache
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: previous_spec_cache
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: skip_backward_compatibility_tests_fixture
            obj: <function TestSpec.skip_backward_compatibility_tests_fixture at 0x103b2f040>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_config_match_spec
            obj: <function TestSpec.test_config_match_spec at 0x103b2f0d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1039c1910>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_config_match_spec[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_match_expected
            obj: <function TestSpec.test_match_expected at 0x103b2f160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103b4a9a0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_match_expected[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_docker_env
            obj: <function TestSpec.test_docker_env at 0x103b2f1f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103b5ae20>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_docker_env[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_enum_usage
            obj: <function TestSpec.test_enum_usage at 0x103b2f280>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c009a0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_enum_usage[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_oneof_usage
            obj: <function TestSpec.test_oneof_usage at 0x103b2f310>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103b5a760>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_oneof_usage[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_required
            obj: <function TestSpec.test_required at 0x103b2f3a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c19250>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_required[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_optional
            obj: <function TestSpec.test_optional at 0x103b2f430>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c38070>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_optional[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_has_secret
            obj: <function TestSpec.test_has_secret at 0x103b2f4c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103b5a4f0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_has_secret[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_secret_never_in_the_output
            obj: <function TestSpec.test_secret_never_in_the_output at 0x103b2f550>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c00820>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_secret_never_in_the_output[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: _is_spec_property_name_secret
            obj: <staticmethod object at 0x103afbe80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: _property_can_store_secret
            obj: <staticmethod object at 0x103b02f10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_secret_is_properly_marked
            obj: <function TestSpec.test_secret_is_properly_marked at 0x103b2f700>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c19940>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_secret_is_properly_marked[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: _fail_on_errors
            obj: <function TestSpec._fail_on_errors at 0x103b2f790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_property_type_is_not_array
            obj: <function TestSpec.test_property_type_is_not_array at 0x103b2f820>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c19100>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_property_type_is_not_array[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_object_not_empty
            obj: <function TestSpec.test_object_not_empty at 0x103b2f8b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c19a30>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_object_not_empty[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_array_type
            obj: <function TestSpec.test_array_type at 0x103b2f940>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c38b20>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_array_type[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_forbidden_complex_types
            obj: <function TestSpec.test_forbidden_complex_types at 0x103b2f9d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c177c0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_forbidden_complex_types[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_date_pattern
            obj: <function TestSpec.test_date_pattern at 0x103b2fa60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c17400>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_date_pattern[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_date_format
            obj: <function TestSpec.test_date_format at 0x103b2faf0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c17580>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_date_format[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_duplicate_order
            obj: <function TestSpec.test_duplicate_order at 0x103b2fb80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c1f3a0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_duplicate_order[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_nested_group
            obj: <function TestSpec.test_nested_group at 0x103b2fc10>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c1f310>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_nested_group[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_required_always_show
            obj: <function TestSpec.test_required_always_show at 0x103b2fca0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c1f700>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_required_always_show[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_defined_refs_exist_in_json_spec_file
            obj: <function TestSpec.test_defined_refs_exist_in_json_spec_file at 0x103b2fd30>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103bff3a0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_defined_refs_exist_in_json_spec_file[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_oauth_flow_parameters
            obj: <function TestSpec.test_oauth_flow_parameters at 0x103b2fdc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103bff040>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_oauth_flow_parameters[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_backward_compatibility
            obj: <function TestSpec.test_backward_compatibility at 0x103b2fe50>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103bff4c0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_backward_compatibility[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_additional_properties_is_true
            obj: <function TestSpec.test_additional_properties_is_true at 0x103b2fee0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c034c0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: spec_path='source_klaus_api/spec.yaml' config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_additional_properties_is_true[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: pytestmark
            obj: [Mark(name='usefixtures', args=('inputs',), kwargs={}), Mark(name='default_timeout', args=(10,), kwargs={})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: config_key
            obj: <classmethod object at 0x1015e4bb0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: MANDATORY_FOR_TEST_STRICTNESS_LEVELS
            obj: [<TestStrictnessLevel.high: 'high'>]
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestSpec' lenresult=23 outcome='passed'> [hook]
    genitems <Function test_config_match_spec[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_config_match_spec[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_match_expected[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_match_expected[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_docker_env[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_docker_env[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_enum_usage[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_enum_usage[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_oneof_usage[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_oneof_usage[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_required[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_required[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_optional[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_optional[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_has_secret[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_has_secret[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_secret_never_in_the_output[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_secret_never_in_the_output[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_secret_is_properly_marked[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_secret_is_properly_marked[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_property_type_is_not_array[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_property_type_is_not_array[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_object_not_empty[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_object_not_empty[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_array_type[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_array_type[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_forbidden_complex_types[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_forbidden_complex_types[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_date_pattern[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_date_pattern[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_date_format[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_date_format[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_duplicate_order[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_duplicate_order[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_nested_group[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_nested_group[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_required_always_show[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_required_always_show[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_defined_refs_exist_in_json_spec_file[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_defined_refs_exist_in_json_spec_file[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_oauth_flow_parameters[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_oauth_flow_parameters[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_backward_compatibility[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_backward_compatibility[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_additional_properties_is_true[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_additional_properties_is_true[inputs0]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestSpec' lenresult=23 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestSpec' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class TestConnection> [collection]
      pytest_collectstart [hook]
          collector: <Class TestConnection>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestConnection>
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestConnection' lenresult=1 outcome='passed'> [hook]
    genitems <Instance ()> [collection]
      pytest_collectstart [hook]
          collector: <Instance ()>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance ()>
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_check
            obj: <function TestConnection.test_check at 0x103b2ff70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c03c10>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' status=<Status.Succeed: 'succeed'> timeout_seconds=None
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='integration_tests/invalid_config.json' status=<Status.Failed: 'failed'> timeout_seconds=None
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_check[inputs0]>, <Function test_check[inputs1]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: pytestmark
            obj: [Mark(name='usefixtures', args=('inputs',), kwargs={}), Mark(name='default_timeout', args=(30,), kwargs={})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: config_key
            obj: <classmethod object at 0x1015e4bb0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: MANDATORY_FOR_TEST_STRICTNESS_LEVELS
            obj: [<TestStrictnessLevel.high: 'high'>]
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestConnection' lenresult=2 outcome='passed'> [hook]
    genitems <Function test_check[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_check[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_check[inputs1]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_check[inputs1]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestConnection' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestConnection' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class TestDiscovery> [collection]
      pytest_collectstart [hook]
          collector: <Class TestDiscovery>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestDiscovery>
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestDiscovery' lenresult=1 outcome='passed'> [hook]
    genitems <Instance ()> [collection]
      pytest_collectstart [hook]
          collector: <Instance ()>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance ()>
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: skip_backward_compatibility_tests_fixture
            obj: <function TestDiscovery.skip_backward_compatibility_tests_fixture at 0x103b300d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_discover
            obj: <function TestDiscovery.test_discover at 0x103b30160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103ba9520>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_discover[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_defined_cursors_exist_in_schema
            obj: <function TestDiscovery.test_defined_cursors_exist_in_schema at 0x103b301f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103bb2580>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_defined_cursors_exist_in_schema[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_defined_refs_exist_in_schema
            obj: <function TestDiscovery.test_defined_refs_exist_in_schema at 0x103b30280>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103c21640>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_defined_refs_exist_in_schema[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_defined_keyword_exist_in_schema
            obj: <function TestDiscovery.test_defined_keyword_exist_in_schema at 0x103b30310>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103bb22b0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: allOf
                argname: keyword
            finish pytest_make_parametrize_id --> None [hook]
          early skip of rewriting module: encodings.unicode_escape [assertion]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: not
                argname: keyword
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_defined_keyword_exist_in_schema[inputs0-allOf]>, <Function test_defined_keyword_exist_in_schema[inputs0-not]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_primary_keys_exist_in_schema
            obj: <function TestDiscovery.test_primary_keys_exist_in_schema at 0x103b303a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103bb29a0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_primary_keys_exist_in_schema[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_streams_has_sync_modes
            obj: <function TestDiscovery.test_streams_has_sync_modes at 0x103b30430>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103bb2c10>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_streams_has_sync_modes[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_additional_properties_is_true
            obj: <function TestDiscovery.test_additional_properties_is_true at 0x103b304c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103bb24f0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_additional_properties_is_true[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_backward_compatibility
            obj: <function TestDiscovery.test_backward_compatibility at 0x103b30550>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103b8e610>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' timeout_seconds=None backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None)
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_backward_compatibility[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: pytestmark
            obj: [Mark(name='usefixtures', args=('inputs',), kwargs={}), Mark(name='default_timeout', args=(30,), kwargs={})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: config_key
            obj: <classmethod object at 0x1015e4bb0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: MANDATORY_FOR_TEST_STRICTNESS_LEVELS
            obj: [<TestStrictnessLevel.high: 'high'>]
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestDiscovery' lenresult=9 outcome='passed'> [hook]
    genitems <Function test_discover[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_discover[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_defined_cursors_exist_in_schema[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_defined_cursors_exist_in_schema[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_defined_refs_exist_in_schema[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_defined_refs_exist_in_schema[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_defined_keyword_exist_in_schema[inputs0-allOf]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_defined_keyword_exist_in_schema[inputs0-allOf]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_defined_keyword_exist_in_schema[inputs0-not]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_defined_keyword_exist_in_schema[inputs0-not]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_primary_keys_exist_in_schema[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_primary_keys_exist_in_schema[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_streams_has_sync_modes[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_streams_has_sync_modes[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_additional_properties_is_true[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_additional_properties_is_true[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_backward_compatibility[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_backward_compatibility[inputs0]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestDiscovery' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestDiscovery' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class TestBasicRead> [collection]
      pytest_collectstart [hook]
          collector: <Class TestBasicRead>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestBasicRead>
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestBasicRead' lenresult=1 outcome='passed'> [hook]
    genitems <Instance ()> [collection]
      pytest_collectstart [hook]
          collector: <Instance ()>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance ()>
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: _validate_records_structure
            obj: <staticmethod object at 0x103b02dc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: _validate_schema
            obj: <staticmethod object at 0x103b02370>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: _validate_empty_streams
            obj: <function TestBasicRead._validate_empty_streams at 0x103b30790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: _validate_field_appears_at_least_once_in_stream
            obj: <function TestBasicRead._validate_field_appears_at_least_once_in_stream at 0x103b30820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: _validate_field_appears_at_least_once
            obj: <function TestBasicRead._validate_field_appears_at_least_once at 0x103b308b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: _validate_expected_records
            obj: <function TestBasicRead._validate_expected_records at 0x103b30940>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: should_validate_schema_fixture
            obj: <function TestBasicRead.should_validate_schema_fixture at 0x103b30a60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: should_fail_on_extra_columns_fixture
            obj: <function TestBasicRead.should_fail_on_extra_columns_fixture at 0x103b30b80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: should_validate_data_points_fixture
            obj: <function TestBasicRead.should_validate_data_points_fixture at 0x103b30ca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: configured_catalog_fixture
            obj: <function TestBasicRead.configured_catalog_fixture at 0x103b30dc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_read
            obj: <function TestBasicRead.test_read at 0x103b30e50>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103b85490>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' configured_catalog_path='integration_tests/configured_catalog.json' empty_streams=set() expect_records=None validate_schema=True fail_on_extra_columns=True validate_data_points=False expect_trace_message_on_failure=True timeout_seconds=None ignored_fields=None
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_read[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_airbyte_trace_message_on_failure
            obj: <function TestBasicRead.test_airbyte_trace_message_on_failure at 0x103b30ee0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103b85100>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' configured_catalog_path='integration_tests/configured_catalog.json' empty_streams=set() expect_records=None validate_schema=True fail_on_extra_columns=True validate_data_points=False expect_trace_message_on_failure=True timeout_seconds=None ignored_fields=None
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_airbyte_trace_message_on_failure[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: remove_extra_fields
            obj: <staticmethod object at 0x103b02460>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: compare_records
            obj: <staticmethod object at 0x103b027c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: group_by_stream
            obj: <staticmethod object at 0x103b28070>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: pytestmark
            obj: [Mark(name='usefixtures', args=('inputs',), kwargs={}), Mark(name='default_timeout', args=(300,), kwargs={})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: config_key
            obj: <classmethod object at 0x1015e4bb0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: MANDATORY_FOR_TEST_STRICTNESS_LEVELS
            obj: [<TestStrictnessLevel.high: 'high'>]
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestBasicRead' lenresult=2 outcome='passed'> [hook]
    genitems <Function test_read[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_read[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_airbyte_trace_message_on_failure[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_airbyte_trace_message_on_failure[inputs0]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestBasicRead' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py::TestBasicRead' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_core.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_full_refresh.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_full_refresh.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_full_refresh.py>
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: time
            obj: <module 'time' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: defaultdict
            obj: <class 'collections.defaultdict'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: partial
            obj: <class 'functools.partial'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: Logger
            obj: <class 'logging.Logger'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: Mapping
            obj: typing.Mapping
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: Optional
            obj: typing.Optional
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: pytest
            obj: <module 'pytest' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: ConfiguredAirbyteCatalog
            obj: <class 'airbyte_protocol.models.airbyte_protocol.ConfiguredAirbyteCatalog'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: Type
            obj: <enum 'Type'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: BaseTest
            obj: <class 'connector_acceptance_test.base.BaseTest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: IgnoredFieldsConfiguration
            obj: <class 'connector_acceptance_test.config.IgnoredFieldsConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: ConnectorRunner
            obj: <class 'connector_acceptance_test.utils.connector_runner.ConnectorRunner'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: JsonSchemaHelper
            obj: <class 'connector_acceptance_test.utils.json_schema_helper.JsonSchemaHelper'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: SecretDict
            obj: <class 'connector_acceptance_test.utils.common.SecretDict'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: full_refresh_only_catalog
            obj: <function full_refresh_only_catalog at 0x102e438b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: make_hashable
            obj: <function make_hashable at 0x102eaa550>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: CatalogField
            obj: <class 'connector_acceptance_test.utils.json_schema_helper.CatalogField'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: primary_keys_by_stream
            obj: <function primary_keys_by_stream at 0x103b321f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: primary_keys_only
            obj: <function primary_keys_only at 0x103b32280>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_full_refresh.py>
            name: TestFullRefresh
            obj: <class 'connector_acceptance_test.tests.test_full_refresh.TestFullRefresh'>
        finish pytest_pycollect_makeitem --> <Class TestFullRefresh> [hook]
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_full_refresh.py' lenresult=1 outcome='passed'> [hook]
    genitems <Class TestFullRefresh> [collection]
      pytest_collectstart [hook]
          collector: <Class TestFullRefresh>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestFullRefresh>
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_full_refresh.py::TestFullRefresh' lenresult=1 outcome='passed'> [hook]
    genitems <Instance ()> [collection]
      pytest_collectstart [hook]
          collector: <Instance ()>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance ()>
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: assert_emitted_at_increase_on_subsequent_runs
            obj: <function TestFullRefresh.assert_emitted_at_increase_on_subsequent_runs at 0x103b323a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: assert_two_sequential_reads_produce_same_or_subset_records
            obj: <function TestFullRefresh.assert_two_sequential_reads_produce_same_or_subset_records at 0x103b32430>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_sequential_reads
            obj: <function TestFullRefresh.test_sequential_reads at 0x103b324c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103b95dc0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' configured_catalog_path='integration_tests/configured_catalog.json' timeout_seconds=None ignored_fields=None
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_sequential_reads[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: pytestmark
            obj: [Mark(name='usefixtures', args=('inputs',), kwargs={}), Mark(name='default_timeout', args=(1200,), kwargs={})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: config_key
            obj: <classmethod object at 0x1015e4bb0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: MANDATORY_FOR_TEST_STRICTNESS_LEVELS
            obj: [<TestStrictnessLevel.high: 'high'>]
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_full_refresh.py::TestFullRefresh' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_sequential_reads[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sequential_reads[inputs0]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_full_refresh.py::TestFullRefresh' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_full_refresh.py::TestFullRefresh' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_full_refresh.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_incremental.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_incremental.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_incremental.py>
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: json
            obj: <module 'json' from '/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: Any
            obj: typing.Any
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: Dict
            obj: typing.Dict
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: Iterable
            obj: typing.Iterable
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: Mapping
            obj: typing.Mapping
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: MutableMapping
            obj: typing.MutableMapping
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: Tuple
            obj: typing.Tuple
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: Union
            obj: typing.Union
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: pendulum
            obj: <module 'pendulum' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pendulum/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: pytest
            obj: <module 'pytest' from '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: AirbyteMessage
            obj: <class 'airbyte_protocol.models.airbyte_protocol.AirbyteMessage'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: AirbyteStateMessage
            obj: <class 'airbyte_protocol.models.airbyte_protocol.AirbyteStateMessage'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: AirbyteStateType
            obj: <enum 'AirbyteStateType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: ConfiguredAirbyteCatalog
            obj: <class 'airbyte_protocol.models.airbyte_protocol.ConfiguredAirbyteCatalog'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: SyncMode
            obj: <enum 'SyncMode'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: Type
            obj: <enum 'Type'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: BaseTest
            obj: <class 'connector_acceptance_test.base.BaseTest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: Config
            obj: <class 'connector_acceptance_test.config.Config'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: EmptyStreamConfiguration
            obj: <class 'connector_acceptance_test.config.EmptyStreamConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: IncrementalConfig
            obj: <class 'connector_acceptance_test.config.IncrementalConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: ConnectorRunner
            obj: <class 'connector_acceptance_test.utils.connector_runner.ConnectorRunner'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: JsonSchemaHelper
            obj: <class 'connector_acceptance_test.utils.json_schema_helper.JsonSchemaHelper'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: SecretDict
            obj: <class 'connector_acceptance_test.utils.common.SecretDict'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: filter_output
            obj: <function filter_output at 0x102e43940>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: incremental_only_catalog
            obj: <function incremental_only_catalog at 0x102e43820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: future_state_configuration_fixture
            obj: <function future_state_configuration_fixture at 0x103b32820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: future_state_fixture
            obj: <function future_state_fixture at 0x103b32940>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: cursor_paths_fixture
            obj: <function cursor_paths_fixture at 0x103b32a60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: configured_catalog_for_incremental_fixture
            obj: <function configured_catalog_for_incremental_fixture at 0x103b32b80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: records_with_state
            obj: <function records_with_state at 0x103b32c10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: compare_cursor_with_threshold
            obj: <function compare_cursor_with_threshold at 0x103b32ca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: is_per_stream_state
            obj: <function is_per_stream_state at 0x103b32d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: construct_latest_state_from_messages
            obj: <function construct_latest_state_from_messages at 0x103aacc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_incremental.py>
            name: TestIncremental
            obj: <class 'connector_acceptance_test.tests.test_incremental.TestIncremental'>
        finish pytest_pycollect_makeitem --> <Class TestIncremental> [hook]
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py' lenresult=1 outcome='passed'> [hook]
    genitems <Class TestIncremental> [collection]
      pytest_collectstart [hook]
          collector: <Class TestIncremental>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestIncremental>
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental' lenresult=1 outcome='passed'> [hook]
    genitems <Instance ()> [collection]
      pytest_collectstart [hook]
          collector: <Instance ()>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance ()>
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_two_sequential_reads
            obj: <function TestIncremental.test_two_sequential_reads at 0x103aaca60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103b95e20>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' configured_catalog_path='integration_tests/configured_catalog_inc.json' cursor_paths=None future_state=FutureStateConfig(future_state_path='integration_tests/abnormal_state.json', missing_streams=[], bypass_reason=None) timeout_seconds=None threshold_days=0 skip_comprehensive_incremental_tests=False
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_two_sequential_reads[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_read_sequential_slices
            obj: <function TestIncremental.test_read_sequential_slices at 0x103b001f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103b956a0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' configured_catalog_path='integration_tests/configured_catalog_inc.json' cursor_paths=None future_state=FutureStateConfig(future_state_path='integration_tests/abnormal_state.json', missing_streams=[], bypass_reason=None) timeout_seconds=None threshold_days=0 skip_comprehensive_incremental_tests=False
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_read_sequential_slices[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_state_with_abnormally_large_values
            obj: <function TestIncremental.test_state_with_abnormally_large_values at 0x103b008b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103bb0430>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101428190>
                val: config_path='secrets/config.json' configured_catalog_path='integration_tests/configured_catalog_inc.json' cursor_paths=None future_state=FutureStateConfig(future_state_path='integration_tests/abnormal_state.json', missing_streams=[], bypass_reason=None) timeout_seconds=None threshold_days=0 skip_comprehensive_incremental_tests=False
                argname: inputs
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_state_with_abnormally_large_values[inputs0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: get_next_state_input
            obj: <function TestIncremental.get_next_state_input at 0x103b00ee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: pytestmark
            obj: [Mark(name='usefixtures', args=('inputs',), kwargs={}), Mark(name='default_timeout', args=(1200,), kwargs={})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: config_key
            obj: <classmethod object at 0x1015e4bb0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: MANDATORY_FOR_TEST_STRICTNESS_LEVELS
            obj: [<TestStrictnessLevel.high: 'high'>]
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_two_sequential_reads[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_two_sequential_reads[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_read_sequential_slices[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_read_sequential_slices[inputs0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_state_with_abnormally_large_values[inputs0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_state_with_abnormally_large_values[inputs0]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/__init__.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x101428190>
          items: [<Function test_config_match_spec[inputs0]>, <Function test_match_expected[inputs0]>, <Function test_docker_env[inputs0]>, <Function test_enum_usage[inputs0]>, <Function test_oneof_usage[inputs0]>, <Function test_required[inputs0]>, <Function test_optional[inputs0]>, <Function test_has_secret[inputs0]>, <Function test_secret_never_in_the_output[inputs0]>, <Function test_secret_is_properly_marked[inputs0]>, <Function test_property_type_is_not_array[inputs0]>, <Function test_object_not_empty[inputs0]>, <Function test_array_type[inputs0]>, <Function test_forbidden_complex_types[inputs0]>, <Function test_date_pattern[inputs0]>, <Function test_date_format[inputs0]>, <Function test_duplicate_order[inputs0]>, <Function test_nested_group[inputs0]>, <Function test_required_always_show[inputs0]>, <Function test_defined_refs_exist_in_json_spec_file[inputs0]>, <Function test_oauth_flow_parameters[inputs0]>, <Function test_backward_compatibility[inputs0]>, <Function test_additional_properties_is_true[inputs0]>, <Function test_check[inputs0]>, <Function test_check[inputs1]>, <Function test_discover[inputs0]>, <Function test_defined_cursors_exist_in_schema[inputs0]>, <Function test_defined_refs_exist_in_schema[inputs0]>, <Function test_defined_keyword_exist_in_schema[inputs0-allOf]>, <Function test_defined_keyword_exist_in_schema[inputs0-not]>, <Function test_primary_keys_exist_in_schema[inputs0]>, <Function test_streams_has_sync_modes[inputs0]>, <Function test_additional_properties_is_true[inputs0]>, <Function test_backward_compatibility[inputs0]>, <Function test_read[inputs0]>, <Function test_airbyte_trace_message_on_failure[inputs0]>, <Function test_sequential_reads[inputs0]>, <Function test_two_sequential_reads[inputs0]>, <Function test_read_sequential_slices[inputs0]>, <Function test_state_with_abnormally_large_values[inputs0]>]
        pytest_deselected [hook]
            items: [<Function test_config_match_spec[inputs0]>, <Function test_match_expected[inputs0]>, <Function test_docker_env[inputs0]>, <Function test_enum_usage[inputs0]>, <Function test_oneof_usage[inputs0]>, <Function test_required[inputs0]>, <Function test_optional[inputs0]>, <Function test_has_secret[inputs0]>, <Function test_secret_never_in_the_output[inputs0]>, <Function test_secret_is_properly_marked[inputs0]>, <Function test_property_type_is_not_array[inputs0]>, <Function test_object_not_empty[inputs0]>, <Function test_array_type[inputs0]>, <Function test_forbidden_complex_types[inputs0]>, <Function test_date_pattern[inputs0]>, <Function test_date_format[inputs0]>, <Function test_duplicate_order[inputs0]>, <Function test_nested_group[inputs0]>, <Function test_required_always_show[inputs0]>, <Function test_defined_refs_exist_in_json_spec_file[inputs0]>, <Function test_oauth_flow_parameters[inputs0]>, <Function test_backward_compatibility[inputs0]>, <Function test_additional_properties_is_true[inputs0]>, <Function test_check[inputs0]>, <Function test_check[inputs1]>, <Function test_discover[inputs0]>, <Function test_defined_cursors_exist_in_schema[inputs0]>, <Function test_defined_refs_exist_in_schema[inputs0]>, <Function test_defined_keyword_exist_in_schema[inputs0-allOf]>, <Function test_defined_keyword_exist_in_schema[inputs0-not]>, <Function test_primary_keys_exist_in_schema[inputs0]>, <Function test_streams_has_sync_modes[inputs0]>, <Function test_additional_properties_is_true[inputs0]>, <Function test_backward_compatibility[inputs0]>, <Function test_read[inputs0]>, <Function test_airbyte_trace_message_on_failure[inputs0]>, <Function test_sequential_reads[inputs0]>]
        finish pytest_deselected --> [] [hook]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x101428190>
            startdir: /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api
            items: [<Function test_two_sequential_reads[inputs0]>, <Function test_read_sequential_slices[inputs0]>, <Function test_state_with_abnormally_large_values[inputs0]>]
        finish pytest_report_collectionfinish --> ['run-last-failure: rerun previous 3 failures'] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session airbyte exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=3>
      pytest_runtest_protocol [hook]
          item: <Function test_two_sequential_reads[inputs0]>
          nextitem: <Function test_read_sequential_slices[inputs0]>
        pytest_runtest_logstart [hook]
            nodeid: airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_two_sequential_reads[inputs0]
            location: ('airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py', 152, 'TestIncremental.test_two_sequential_reads[inputs0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_two_sequential_reads[inputs0]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connector_setup' scope='session' baseid=''>
              request: <SubRequest 'connector_setup' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pytestconfig' scope='session' baseid=''>
              request: <SubRequest 'pytestconfig' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> <_pytest.config.Config object at 0x101428190> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='acceptance_test_config' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'acceptance_test_config' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> cache_discovered_catalog=True connector_image='airbyte/source-klaus-api:dev' acceptance_tests=AcceptanceTestConfigurations(spec=GenericTestConfig[SpecTestConfig](bypass_reason=None, tests=[SpecTestConfig(spec_path='source_klaus_api/spec.yaml', config_path='secrets/config.json', timeout_seconds=None, backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None))]), connection=GenericTestConfig[ConnectionTestConfig](bypass_reason=None, tests=[ConnectionTestConfig(config_path='secrets/config.json', status=<Status.Succeed: 'succeed'>, timeout_seconds=None), ConnectionTestConfig(config_path='integration_tests/invalid_config.json', status=<Status.Failed: 'failed'>, timeout_seconds=None)]), discovery=GenericTestConfig[DiscoveryTestConfig](bypass_reason=None, tests=[DiscoveryTestConfig(config_path='secrets/config.json', timeout_seconds=None, backward_compatibility_tests_config=BackwardCompatibilityTestsConfig(previous_connector_version='latest', disable_for_version=None))]), basic_read=GenericTestConfig[BasicReadTestConfig](bypass_reason=None, tests=[BasicReadTestConfig(config_path='secrets/config.json', configured_catalog_path='integration_tests/configured_catalog.json', empty_streams=set(), expect_records=None, validate_schema=True, fail_on_extra_columns=True, validate_data_points=False, expect_trace_message_on_failure=True, timeout_seconds=None, ignored_fields=None)]), full_refresh=GenericTestConfig[FullRefreshConfig](bypass_reason=None, tests=[FullRefreshConfig(config_path='secrets/config.json', configured_catalog_path='integration_tests/configured_catalog.json', timeout_seconds=None, ignored_fields=None)]), incremental=GenericTestConfig[IncrementalConfig](bypass_reason=None, tests=[IncrementalConfig(config_path='secrets/config.json', configured_catalog_path='integration_tests/configured_catalog_inc.json', cursor_paths=None, future_state=FutureStateConfig(future_state_path='integration_tests/abnormal_state.json', missing_streams=[], bypass_reason=None), timeout_seconds=None, threshold_days=0, skip_comprehensive_incremental_tests=False)])) base_path=None test_strictness_level=<TestStrictnessLevel.low: 'low'> custom_environment_variables={} [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pull_docker_image' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'pull_docker_image' for <Function test_two_sequential_reads[inputs0]>>
          early skip of rewriting module: netrc [assertion]
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='custom_environment_variables' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'custom_environment_variables' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
              request: <SubRequest 'tmp_path_factory' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x1033e3c40>, _basetemp=None) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='cached_schemas' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'cached_schemas' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='cache_discovered_catalog' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'cache_discovered_catalog' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> True [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='inputs' scope='function' baseid=''>
              request: <SubRequest 'inputs' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> config_path='secrets/config.json' configured_catalog_path='integration_tests/configured_catalog_inc.json' cursor_paths=None future_state=FutureStateConfig(future_state_path='integration_tests/abnormal_state.json', missing_streams=[], bypass_reason=None) timeout_seconds=None threshold_days=0 skip_comprehensive_incremental_tests=False [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='base_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'base_path' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connector_config_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config_path' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/secrets/config.json [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connector_config' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> SecretDict(******) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='configured_catalog_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog_path' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/configured_catalog_inc.json [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='image_tag' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'image_tag' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> airbyte/source-klaus-api:dev [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_two_sequential_reads[inputs0]>>
          early skip of rewriting module: getpass [assertion]
          early skip of rewriting module: termios [assertion]
          new basetemp /private/var/folders/vy/7vhlvnh53c962pjlv11x_pwr0000gq/T/pytest-of-Deke/pytest-78 [config:tmpdir]
          mktemp /private/var/folders/vy/7vhlvnh53c962pjlv11x_pwr0000gq/T/pytest-of-Deke/pytest-78/test_two_sequential_reads_inpu0 [config:tmpdir]
          finish pytest_fixture_setup --> /private/var/folders/vy/7vhlvnh53c962pjlv11x_pwr0000gq/T/pytest-of-Deke/pytest-78/test_two_sequential_reads_inpu0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'docker_runner' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> <connector_acceptance_test.utils.connector_runner.ConnectorRunner object at 0x103b92eb0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'discovered_catalog' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> [hook]
              reviews: name='reviews' json_schema={'$schema': 'http://json-schema.org/schema#', 'properties': {'comments': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'createdAt': {'type': 'string'}, 'createdAtISO': {'type': 'string'}, 'externalId': {'type': 'string'}, 'externalUrl': {'type': 'string'}, 'lastUpdatedISO': {'type': 'string'}, 'reviews': {'items': {'properties': {'comment': {'type': ['null', 'string']}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'ratings': {'items': {'properties': {'categoryId': {'type': 'string'}, 'categoryName': {'type': 'string'}, 'cause': {'type': 'null'}, 'critical': {'type': 'boolean'}, 'score': {'type': ['integer', 'null']}, 'weight': {'type': 'number'}}, 'type': 'object'}, 'type': 'array'}, 'received': {'type': 'boolean'}, 'reviewTime': {'type': 'string'}, 'reviewee': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'reviewer': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'score': {'type': 'number'}, 'scorecard': {'type': 'null'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'sourceType': {'type': 'string'}, 'updated_at': {'type': 'string'}, 'url': {'type': 'string'}, 'workspaceId': {'type': 'string'}}, 'type': 'object'} supported_sync_modes=[<SyncMode.full_refresh: 'full_refresh'>, <SyncMode.incremental: 'incremental'>] source_defined_cursor=True default_cursor_field=['lastUpdatedISO'] source_defined_primary_key=None namespace=None
              users: name='users' json_schema={'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {'id': {'type': ['string']}, 'name': {'type': ['string']}, 'email': {'type': ['string']}}} supported_sync_modes=[<SyncMode.full_refresh: 'full_refresh'>] source_defined_cursor=None default_cursor_field=None source_defined_primary_key=[['id']] namespace=None
              categories: name='categories' json_schema={'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {'id': {'type': ['string']}, 'name': {'type': ['string']}, 'description': {'type': ['string', 'null']}, 'critical': {'type': ['boolean', 'null']}, 'archived': {'type': ['boolean', 'null']}, 'weight': {'type': ['number', 'null']}, 'maxRating': {'type': ['integer', 'null']}, 'scorecards': {'type': 'array', 'items': {'type': 'string'}}, 'rootCauses': {'type': 'array', 'items': {'type': 'string'}}, 'position': {'type': ['integer', 'null']}, 'groupId': {'type': ['null', 'string']}, 'groupName': {'type': ['null', 'string']}, 'groupPosition': {'type': ['null', 'integer']}}} supported_sync_modes=[<SyncMode.full_refresh: 'full_refresh'>] source_defined_cursor=None default_cursor_field=None source_defined_primary_key=[['id']] namespace=None
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='configured_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> streams=[ConfiguredAirbyteStream(stream=AirbyteStream(name='reviews', json_schema={'$schema': 'http://json-schema.org/schema#', 'properties': {'comments': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'createdAt': {'type': 'string'}, 'createdAtISO': {'type': 'string'}, 'externalId': {'type': 'string'}, 'externalUrl': {'type': 'string'}, 'lastUpdatedISO': {'type': 'string'}, 'reviews': {'items': {'properties': {'comment': {'type': ['null', 'string']}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'ratings': {'items': {'properties': {'categoryId': {'type': 'string'}, 'categoryName': {'type': 'string'}, 'cause': {'type': 'null'}, 'critical': {'type': 'boolean'}, 'score': {'type': ['integer', 'null']}, 'weight': {'type': 'number'}}, 'type': 'object'}, 'type': 'array'}, 'received': {'type': 'boolean'}, 'reviewTime': {'type': 'string'}, 'reviewee': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'reviewer': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'score': {'type': 'number'}, 'scorecard': {'type': 'null'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'sourceType': {'type': 'string'}, 'updated_at': {'type': 'string'}, 'url': {'type': 'string'}, 'workspaceId': {'type': 'string'}}, 'type': 'object'}, supported_sync_modes=[<SyncMode.full_refresh: 'full_refresh'>, <SyncMode.incremental: 'incremental'>], source_defined_cursor=True, default_cursor_field=['lastUpdatedISO'], source_defined_primary_key=None, namespace=None), sync_mode=<SyncMode.incremental: 'incremental'>, cursor_field=['lastUpdatedISO'], destination_sync_mode=<DestinationSyncMode.append: 'append'>, primary_key=None)] [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='configured_catalog_for_incremental' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'configured_catalog_for_incremental' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> streams=[ConfiguredAirbyteStream(stream=AirbyteStream(name='reviews', json_schema={'$schema': 'http://json-schema.org/schema#', 'properties': {'comments': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'createdAt': {'type': 'string'}, 'createdAtISO': {'type': 'string'}, 'externalId': {'type': 'string'}, 'externalUrl': {'type': 'string'}, 'lastUpdatedISO': {'type': 'string'}, 'reviews': {'items': {'properties': {'comment': {'type': ['null', 'string']}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'ratings': {'items': {'properties': {'categoryId': {'type': 'string'}, 'categoryName': {'type': 'string'}, 'cause': {'type': 'null'}, 'critical': {'type': 'boolean'}, 'score': {'type': ['integer', 'null']}, 'weight': {'type': 'number'}}, 'type': 'object'}, 'type': 'array'}, 'received': {'type': 'boolean'}, 'reviewTime': {'type': 'string'}, 'reviewee': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'reviewer': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'score': {'type': 'number'}, 'scorecard': {'type': 'null'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'sourceType': {'type': 'string'}, 'updated_at': {'type': 'string'}, 'url': {'type': 'string'}, 'workspaceId': {'type': 'string'}}, 'type': 'object'}, supported_sync_modes=[<SyncMode.full_refresh: 'full_refresh'>, <SyncMode.incremental: 'incremental'>], source_defined_cursor=True, default_cursor_field=['lastUpdatedISO'], source_defined_primary_key=None, namespace=None), sync_mode=<SyncMode.incremental: 'incremental'>, cursor_field=['lastUpdatedISO'], destination_sync_mode=<DestinationSyncMode.append: 'append'>, primary_key=None)] [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='cursor_paths' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'cursor_paths' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_setup --> [hook]
              reviews: ['lastUpdatedISO']
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_two_sequential_reads[inputs0]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_two_sequential_reads[inputs0]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_two_sequential_reads[inputs0]' when='setup' outcome='passed'>
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_two_sequential_reads[inputs0]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_two_sequential_reads[inputs0]>
        pytest_runtest_makereport [hook]
            item: <Function test_two_sequential_reads[inputs0]>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("Second incremental sync should produce records older or equal to cursor value from the state. Stream: ...ews\nassert False\n +  where False = compare_cursor_with_threshold('2023-06-05T12:40:56Z', '2023-06-05T12:41:26Z', 0)") tblen=25>>
        finish pytest_runtest_makereport --> <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_two_sequential_reads[inputs0]' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_two_sequential_reads[inputs0]' when='call' outcome='failed'>
        early skip of rewriting module: pygments [assertion]
        early skip of rewriting module: pygments.formatters [assertion]
        early skip of rewriting module: pygments.formatters._mapping [assertion]
        early skip of rewriting module: pygments.plugin [assertion]
        early skip of rewriting module: pygments.util [assertion]
        early skip of rewriting module: pygments.formatters.terminal [assertion]
        early skip of rewriting module: pygments.formatter [assertion]
        early skip of rewriting module: pygments.styles [assertion]
        early skip of rewriting module: pygments.token [assertion]
        early skip of rewriting module: pygments.console [assertion]
        early skip of rewriting module: pygments.lexers [assertion]
        early skip of rewriting module: pygments.lexers._mapping [assertion]
        early skip of rewriting module: pygments.modeline [assertion]
        early skip of rewriting module: pygments.lexers.python [assertion]
        early skip of rewriting module: pygments.lexer [assertion]
        early skip of rewriting module: pygments.filter [assertion]
        early skip of rewriting module: pygments.filters [assertion]
        early skip of rewriting module: pygments.regexopt [assertion]
        early skip of rewriting module: pygments.unistring [assertion]
        early skip of rewriting module: pygments.styles.default [assertion]
        early skip of rewriting module: pygments.style [assertion]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_two_sequential_reads[inputs0]>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("Second incremental sync should produce records older or equal to cursor value from the state. Stream: ...ews\nassert False\n +  where False = compare_cursor_with_threshold('2023-06-05T12:40:56Z', '2023-06-05T12:41:26Z', 0)") tblen=1>>
            report: <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_two_sequential_reads[inputs0]' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_two_sequential_reads[inputs0]>
            nextitem: <Function test_read_sequential_slices[inputs0]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='cursor_paths' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'cursor_paths' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='cursor_paths' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'cursor_paths' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog_for_incremental' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'configured_catalog_for_incremental' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog_for_incremental' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'configured_catalog_for_incremental' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'discovered_catalog' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'discovered_catalog' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'docker_runner' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'docker_runner' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'docker_runner' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='image_tag' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'image_tag' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog_path' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'discovered_catalog' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connector_config' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'docker_runner' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connector_config' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connector_config_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config_path' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog_path' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connector_config_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config_path' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connector_config' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='base_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'base_path' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='cursor_paths' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'cursor_paths' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog_path' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connector_config_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config_path' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='inputs' scope='function' baseid=''>
              request: <SubRequest 'inputs' for <Function test_two_sequential_reads[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_two_sequential_reads[inputs0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_two_sequential_reads[inputs0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_two_sequential_reads[inputs0]' when='teardown' outcome='passed'>
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_two_sequential_reads[inputs0]
            location: ('airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py', 152, 'TestIncremental.test_two_sequential_reads[inputs0]')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 52, line : None}
            when: runtest
            item: <Function test_two_sequential_reads[inputs0]>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 52, line : None}
            nodeid: airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_two_sequential_reads[inputs0]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 53, line : None}
            when: runtest
            item: <Function test_two_sequential_reads[inputs0]>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 53, line : None}
            nodeid: airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_two_sequential_reads[inputs0]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 52, line : None}
            when: runtest
            item: <Function test_two_sequential_reads[inputs0]>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 52, line : None}
            nodeid: airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_two_sequential_reads[inputs0]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 53, line : None}
            when: runtest
            item: <Function test_two_sequential_reads[inputs0]>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 53, line : None}
            nodeid: airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_two_sequential_reads[inputs0]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_read_sequential_slices[inputs0]>
          nextitem: <Function test_state_with_abnormally_large_values[inputs0]>
        pytest_runtest_logstart [hook]
            nodeid: airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_read_sequential_slices[inputs0]
            location: ('airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py', 201, 'TestIncremental.test_read_sequential_slices[inputs0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_read_sequential_slices[inputs0]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='inputs' scope='function' baseid=''>
              request: <SubRequest 'inputs' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_setup --> config_path='secrets/config.json' configured_catalog_path='integration_tests/configured_catalog_inc.json' cursor_paths=None future_state=FutureStateConfig(future_state_path='integration_tests/abnormal_state.json', missing_streams=[], bypass_reason=None) timeout_seconds=None threshold_days=0 skip_comprehensive_incremental_tests=False [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='base_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'base_path' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_setup --> /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connector_config_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config_path' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_setup --> /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/secrets/config.json [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connector_config' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_setup --> SecretDict(******) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='configured_catalog_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog_path' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_setup --> /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/configured_catalog_inc.json [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='image_tag' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'image_tag' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_setup --> airbyte/source-klaus-api:dev [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_read_sequential_slices[inputs0]>>
          mktemp /private/var/folders/vy/7vhlvnh53c962pjlv11x_pwr0000gq/T/pytest-of-Deke/pytest-78/test_read_sequential_slices_in0 [config:tmpdir]
          finish pytest_fixture_setup --> /private/var/folders/vy/7vhlvnh53c962pjlv11x_pwr0000gq/T/pytest-of-Deke/pytest-78/test_read_sequential_slices_in0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'docker_runner' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_setup --> <connector_acceptance_test.utils.connector_runner.ConnectorRunner object at 0x103fc0f70> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'discovered_catalog' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_setup --> [hook]
              reviews: name='reviews' json_schema={'$schema': 'http://json-schema.org/schema#', 'properties': {'comments': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'createdAt': {'type': 'string'}, 'createdAtISO': {'type': 'string'}, 'externalId': {'type': 'string'}, 'externalUrl': {'type': 'string'}, 'lastUpdatedISO': {'type': 'string'}, 'reviews': {'items': {'properties': {'comment': {'type': ['null', 'string']}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'ratings': {'items': {'properties': {'categoryId': {'type': 'string'}, 'categoryName': {'type': 'string'}, 'cause': {'type': 'null'}, 'critical': {'type': 'boolean'}, 'score': {'type': ['integer', 'null']}, 'weight': {'type': 'number'}}, 'type': 'object'}, 'type': 'array'}, 'received': {'type': 'boolean'}, 'reviewTime': {'type': 'string'}, 'reviewee': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'reviewer': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'score': {'type': 'number'}, 'scorecard': {'type': 'null'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'sourceType': {'type': 'string'}, 'updated_at': {'type': 'string'}, 'url': {'type': 'string'}, 'workspaceId': {'type': 'string'}}, 'type': 'object'} supported_sync_modes=[<SyncMode.full_refresh: 'full_refresh'>, <SyncMode.incremental: 'incremental'>] source_defined_cursor=True default_cursor_field=['lastUpdatedISO'] source_defined_primary_key=None namespace=None
              users: name='users' json_schema={'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {'id': {'type': ['string']}, 'name': {'type': ['string']}, 'email': {'type': ['string']}}} supported_sync_modes=[<SyncMode.full_refresh: 'full_refresh'>] source_defined_cursor=None default_cursor_field=None source_defined_primary_key=[['id']] namespace=None
              categories: name='categories' json_schema={'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {'id': {'type': ['string']}, 'name': {'type': ['string']}, 'description': {'type': ['string', 'null']}, 'critical': {'type': ['boolean', 'null']}, 'archived': {'type': ['boolean', 'null']}, 'weight': {'type': ['number', 'null']}, 'maxRating': {'type': ['integer', 'null']}, 'scorecards': {'type': 'array', 'items': {'type': 'string'}}, 'rootCauses': {'type': 'array', 'items': {'type': 'string'}}, 'position': {'type': ['integer', 'null']}, 'groupId': {'type': ['null', 'string']}, 'groupName': {'type': ['null', 'string']}, 'groupPosition': {'type': ['null', 'integer']}}} supported_sync_modes=[<SyncMode.full_refresh: 'full_refresh'>] source_defined_cursor=None default_cursor_field=None source_defined_primary_key=[['id']] namespace=None
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='configured_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_setup --> streams=[ConfiguredAirbyteStream(stream=AirbyteStream(name='reviews', json_schema={'$schema': 'http://json-schema.org/schema#', 'properties': {'comments': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'createdAt': {'type': 'string'}, 'createdAtISO': {'type': 'string'}, 'externalId': {'type': 'string'}, 'externalUrl': {'type': 'string'}, 'lastUpdatedISO': {'type': 'string'}, 'reviews': {'items': {'properties': {'comment': {'type': ['null', 'string']}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'ratings': {'items': {'properties': {'categoryId': {'type': 'string'}, 'categoryName': {'type': 'string'}, 'cause': {'type': 'null'}, 'critical': {'type': 'boolean'}, 'score': {'type': ['integer', 'null']}, 'weight': {'type': 'number'}}, 'type': 'object'}, 'type': 'array'}, 'received': {'type': 'boolean'}, 'reviewTime': {'type': 'string'}, 'reviewee': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'reviewer': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'score': {'type': 'number'}, 'scorecard': {'type': 'null'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'sourceType': {'type': 'string'}, 'updated_at': {'type': 'string'}, 'url': {'type': 'string'}, 'workspaceId': {'type': 'string'}}, 'type': 'object'}, supported_sync_modes=[<SyncMode.full_refresh: 'full_refresh'>, <SyncMode.incremental: 'incremental'>], source_defined_cursor=True, default_cursor_field=['lastUpdatedISO'], source_defined_primary_key=None, namespace=None), sync_mode=<SyncMode.incremental: 'incremental'>, cursor_field=['lastUpdatedISO'], destination_sync_mode=<DestinationSyncMode.append: 'append'>, primary_key=None)] [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='configured_catalog_for_incremental' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'configured_catalog_for_incremental' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_setup --> streams=[ConfiguredAirbyteStream(stream=AirbyteStream(name='reviews', json_schema={'$schema': 'http://json-schema.org/schema#', 'properties': {'comments': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'createdAt': {'type': 'string'}, 'createdAtISO': {'type': 'string'}, 'externalId': {'type': 'string'}, 'externalUrl': {'type': 'string'}, 'lastUpdatedISO': {'type': 'string'}, 'reviews': {'items': {'properties': {'comment': {'type': ['null', 'string']}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'ratings': {'items': {'properties': {'categoryId': {'type': 'string'}, 'categoryName': {'type': 'string'}, 'cause': {'type': 'null'}, 'critical': {'type': 'boolean'}, 'score': {'type': ['integer', 'null']}, 'weight': {'type': 'number'}}, 'type': 'object'}, 'type': 'array'}, 'received': {'type': 'boolean'}, 'reviewTime': {'type': 'string'}, 'reviewee': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'reviewer': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'score': {'type': 'number'}, 'scorecard': {'type': 'null'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'sourceType': {'type': 'string'}, 'updated_at': {'type': 'string'}, 'url': {'type': 'string'}, 'workspaceId': {'type': 'string'}}, 'type': 'object'}, supported_sync_modes=[<SyncMode.full_refresh: 'full_refresh'>, <SyncMode.incremental: 'incremental'>], source_defined_cursor=True, default_cursor_field=['lastUpdatedISO'], source_defined_primary_key=None, namespace=None), sync_mode=<SyncMode.incremental: 'incremental'>, cursor_field=['lastUpdatedISO'], destination_sync_mode=<DestinationSyncMode.append: 'append'>, primary_key=None)] [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='cursor_paths' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'cursor_paths' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_setup --> [hook]
              reviews: ['lastUpdatedISO']
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_read_sequential_slices[inputs0]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_read_sequential_slices[inputs0]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_read_sequential_slices[inputs0]' when='setup' outcome='passed'>
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_read_sequential_slices[inputs0]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_read_sequential_slices[inputs0]>
        pytest_runtest_makereport [hook]
            item: <Function test_read_sequential_slices[inputs0]>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("Second incremental sync should produce records older or equal to cursor value from the state. Stream: ...ews\nassert False\n +  where False = compare_cursor_with_threshold('2023-06-05T12:40:56Z', '2023-06-05T12:41:26Z', 0)") tblen=25>>
        finish pytest_runtest_makereport --> <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_read_sequential_slices[inputs0]' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_read_sequential_slices[inputs0]' when='call' outcome='failed'>
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_read_sequential_slices[inputs0]>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("Second incremental sync should produce records older or equal to cursor value from the state. Stream: ...ews\nassert False\n +  where False = compare_cursor_with_threshold('2023-06-05T12:40:56Z', '2023-06-05T12:41:26Z', 0)") tblen=1>>
            report: <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_read_sequential_slices[inputs0]' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_read_sequential_slices[inputs0]>
            nextitem: <Function test_state_with_abnormally_large_values[inputs0]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='cursor_paths' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'cursor_paths' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='cursor_paths' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'cursor_paths' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog_for_incremental' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'configured_catalog_for_incremental' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog_for_incremental' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'configured_catalog_for_incremental' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'discovered_catalog' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'discovered_catalog' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'docker_runner' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'docker_runner' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'docker_runner' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='image_tag' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'image_tag' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog_path' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'discovered_catalog' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connector_config' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'docker_runner' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connector_config' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connector_config_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config_path' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog_path' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connector_config_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config_path' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connector_config' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='base_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'base_path' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='cursor_paths' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'cursor_paths' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='configured_catalog_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog_path' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connector_config_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config_path' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='inputs' scope='function' baseid=''>
              request: <SubRequest 'inputs' for <Function test_read_sequential_slices[inputs0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_read_sequential_slices[inputs0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_read_sequential_slices[inputs0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_read_sequential_slices[inputs0]' when='teardown' outcome='passed'>
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_read_sequential_slices[inputs0]
            location: ('airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py', 201, 'TestIncremental.test_read_sequential_slices[inputs0]')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 52, line : None}
            when: runtest
            item: <Function test_read_sequential_slices[inputs0]>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 52, line : None}
            nodeid: airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_read_sequential_slices[inputs0]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 53, line : None}
            when: runtest
            item: <Function test_read_sequential_slices[inputs0]>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 53, line : None}
            nodeid: airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_read_sequential_slices[inputs0]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_state_with_abnormally_large_values[inputs0]>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_state_with_abnormally_large_values[inputs0]
            location: ('airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py', 261, 'TestIncremental.test_state_with_abnormally_large_values[inputs0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_state_with_abnormally_large_values[inputs0]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='test_strictness_level' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'test_strictness_level' for <Function test_state_with_abnormally_large_values[inputs0]>>
          finish pytest_fixture_setup --> TestStrictnessLevel.low [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='inputs' scope='function' baseid=''>
              request: <SubRequest 'inputs' for <Function test_state_with_abnormally_large_values[inputs0]>>
          finish pytest_fixture_setup --> config_path='secrets/config.json' configured_catalog_path='integration_tests/configured_catalog_inc.json' cursor_paths=None future_state=FutureStateConfig(future_state_path='integration_tests/abnormal_state.json', missing_streams=[], bypass_reason=None) timeout_seconds=None threshold_days=0 skip_comprehensive_incremental_tests=False [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='base_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'base_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
          finish pytest_fixture_setup --> /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connector_config_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
          finish pytest_fixture_setup --> /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/secrets/config.json [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connector_config' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'connector_config' for <Function test_state_with_abnormally_large_values[inputs0]>>
          finish pytest_fixture_setup --> SecretDict(******) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='configured_catalog_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
          finish pytest_fixture_setup --> /Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/configured_catalog_inc.json [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='image_tag' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'image_tag' for <Function test_state_with_abnormally_large_values[inputs0]>>
          finish pytest_fixture_setup --> airbyte/source-klaus-api:dev [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
          mktemp /private/var/folders/vy/7vhlvnh53c962pjlv11x_pwr0000gq/T/pytest-of-Deke/pytest-78/test_state_with_abnormally_lar0 [config:tmpdir]
          finish pytest_fixture_setup --> /private/var/folders/vy/7vhlvnh53c962pjlv11x_pwr0000gq/T/pytest-of-Deke/pytest-78/test_state_with_abnormally_lar0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'docker_runner' for <Function test_state_with_abnormally_large_values[inputs0]>>
          finish pytest_fixture_setup --> <connector_acceptance_test.utils.connector_runner.ConnectorRunner object at 0x1041daa90> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'discovered_catalog' for <Function test_state_with_abnormally_large_values[inputs0]>>
          finish pytest_fixture_setup --> [hook]
              reviews: name='reviews' json_schema={'$schema': 'http://json-schema.org/schema#', 'properties': {'comments': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'createdAt': {'type': 'string'}, 'createdAtISO': {'type': 'string'}, 'externalId': {'type': 'string'}, 'externalUrl': {'type': 'string'}, 'lastUpdatedISO': {'type': 'string'}, 'reviews': {'items': {'properties': {'comment': {'type': ['null', 'string']}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'ratings': {'items': {'properties': {'categoryId': {'type': 'string'}, 'categoryName': {'type': 'string'}, 'cause': {'type': 'null'}, 'critical': {'type': 'boolean'}, 'score': {'type': ['integer', 'null']}, 'weight': {'type': 'number'}}, 'type': 'object'}, 'type': 'array'}, 'received': {'type': 'boolean'}, 'reviewTime': {'type': 'string'}, 'reviewee': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'reviewer': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'score': {'type': 'number'}, 'scorecard': {'type': 'null'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'sourceType': {'type': 'string'}, 'updated_at': {'type': 'string'}, 'url': {'type': 'string'}, 'workspaceId': {'type': 'string'}}, 'type': 'object'} supported_sync_modes=[<SyncMode.full_refresh: 'full_refresh'>, <SyncMode.incremental: 'incremental'>] source_defined_cursor=True default_cursor_field=['lastUpdatedISO'] source_defined_primary_key=None namespace=None
              users: name='users' json_schema={'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {'id': {'type': ['string']}, 'name': {'type': ['string']}, 'email': {'type': ['string']}}} supported_sync_modes=[<SyncMode.full_refresh: 'full_refresh'>] source_defined_cursor=None default_cursor_field=None source_defined_primary_key=[['id']] namespace=None
              categories: name='categories' json_schema={'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {'id': {'type': ['string']}, 'name': {'type': ['string']}, 'description': {'type': ['string', 'null']}, 'critical': {'type': ['boolean', 'null']}, 'archived': {'type': ['boolean', 'null']}, 'weight': {'type': ['number', 'null']}, 'maxRating': {'type': ['integer', 'null']}, 'scorecards': {'type': 'array', 'items': {'type': 'string'}}, 'rootCauses': {'type': 'array', 'items': {'type': 'string'}}, 'position': {'type': ['integer', 'null']}, 'groupId': {'type': ['null', 'string']}, 'groupName': {'type': ['null', 'string']}, 'groupPosition': {'type': ['null', 'integer']}}} supported_sync_modes=[<SyncMode.full_refresh: 'full_refresh'>] source_defined_cursor=None default_cursor_field=None source_defined_primary_key=[['id']] namespace=None
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='configured_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
              request: <SubRequest 'configured_catalog' for <Function test_state_with_abnormally_large_values[inputs0]>>
          finish pytest_fixture_setup --> streams=[ConfiguredAirbyteStream(stream=AirbyteStream(name='reviews', json_schema={'$schema': 'http://json-schema.org/schema#', 'properties': {'comments': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'createdAt': {'type': 'string'}, 'createdAtISO': {'type': 'string'}, 'externalId': {'type': 'string'}, 'externalUrl': {'type': 'string'}, 'lastUpdatedISO': {'type': 'string'}, 'reviews': {'items': {'properties': {'comment': {'type': ['null', 'string']}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'ratings': {'items': {'properties': {'categoryId': {'type': 'string'}, 'categoryName': {'type': 'string'}, 'cause': {'type': 'null'}, 'critical': {'type': 'boolean'}, 'score': {'type': ['integer', 'null']}, 'weight': {'type': 'number'}}, 'type': 'object'}, 'type': 'array'}, 'received': {'type': 'boolean'}, 'reviewTime': {'type': 'string'}, 'reviewee': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'reviewer': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'score': {'type': 'number'}, 'scorecard': {'type': 'null'}, 'tags': {'type': 'array'}, 'thread': {'items': {'properties': {'comment': {'type': 'string'}, 'created': {'type': 'string'}, 'createdISO': {'type': 'string'}, 'id': {'type': 'string'}, 'owner': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'tags': {'items': {'properties': {'tag': {'type': 'string'}, 'user': {'properties': {'avatar': {'type': 'string'}, 'email': {'type': 'string'}, 'groups': {'items': {'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'name': {'type': 'string'}}, 'type': 'object'}}, 'type': 'object'}, 'type': 'array'}, 'thread': {'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'updated': {'type': 'string'}, 'updatedISO': {'type': 'string'}}, 'type': 'object'}, 'type': 'array'}, 'sourceType': {'type': 'string'}, 'updated_at': {'type': 'string'}, 'url': {'type': 'string'}, 'workspaceId': {'type': 'string'}}, 'type': 'object'}, supported_sync_modes=[<SyncMode.full_refresh: 'full_refresh'>, <SyncMode.incremental: 'incremental'>], source_defined_cursor=True, default_cursor_field=['lastUpdatedISO'], source_defined_primary_key=None, namespace=None), sync_mode=<SyncMode.incremental: 'incremental'>, cursor_field=['lastUpdatedISO'], destination_sync_mode=<DestinationSyncMode.append: 'append'>, primary_key=None)] [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='future_state_configuration' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'future_state_configuration' for <Function test_state_with_abnormally_large_values[inputs0]>>
          finish pytest_fixture_setup --> (PosixPath('/Users/Deke/Projets/github/airbyte/airbyte-integrations/connectors/source-klaus-api/integration_tests/abnormal_state.json'), []) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='future_state' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
              request: <SubRequest 'future_state' for <Function test_state_with_abnormally_large_values[inputs0]>>
          finish pytest_fixture_setup --> [{'stream_descriptor': {'name': 'reviews'}, 'stream_state': {'lastUpdatedISO': '2123-05-18T23:26:29Z'}}] [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_state_with_abnormally_large_values[inputs0]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_state_with_abnormally_large_values[inputs0]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_state_with_abnormally_large_values[inputs0]' when='setup' outcome='passed'>
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_state_with_abnormally_large_values[inputs0]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_state_with_abnormally_large_values[inputs0]>
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 52, line : None}
            when: runtest
            item: <Function test_state_with_abnormally_large_values[inputs0]>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 52, line : None}
            nodeid: airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_state_with_abnormally_large_values[inputs0]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 53, line : None}
            when: runtest
            item: <Function test_state_with_abnormally_large_values[inputs0]>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.'), category : 'DeprecationWarning', filename : '/Users/Deke/Projets/github/airbyte/venv/lib/python3.9/site-packages/docker/utils/utils.py', lineno : 53, line : None}
            nodeid: airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_state_with_abnormally_large_values[inputs0]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
    pytest_keyboard_interrupt [hook]
        excinfo: <ExceptionInfo KeyboardInterrupt() tblen=69>
    finish pytest_keyboard_interrupt --> [] [hook]
    pytest_sessionfinish [hook]
        session: <Session airbyte exitstatus=<ExitCode.INTERRUPTED: 2> testsfailed=2 testscollected=3>
        exitstatus: 2
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='future_state' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
          request: <SubRequest 'future_state' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='future_state' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
          request: <SubRequest 'future_state' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='future_state_configuration' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
          request: <SubRequest 'future_state_configuration' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='future_state' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
          request: <SubRequest 'future_state' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='configured_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'configured_catalog' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='configured_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'configured_catalog' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'discovered_catalog' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'discovered_catalog' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'docker_runner' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'docker_runner' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
          request: <SubRequest 'tmp_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'docker_runner' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='image_tag' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'image_tag' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='configured_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'configured_catalog' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='configured_catalog_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'configured_catalog_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'discovered_catalog' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='connector_config' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'connector_config' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'docker_runner' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='connector_config' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'connector_config' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='connector_config_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'connector_config_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='future_state_configuration' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
          request: <SubRequest 'future_state_configuration' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='configured_catalog_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'configured_catalog_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='connector_config_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'connector_config_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='connector_config' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'connector_config' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='base_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'base_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='future_state_configuration' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
          request: <SubRequest 'future_state_configuration' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='configured_catalog_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'configured_catalog_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='connector_config_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'connector_config_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='inputs' scope='function' baseid=''>
          request: <SubRequest 'inputs' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
          request: <SubRequest 'tmp_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
          request: <SubRequest 'tmp_path' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
          request: <SubRequest 'tmp_path' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
          request: <SubRequest 'tmp_path_factory' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'discovered_catalog' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'discovered_catalog' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'discovered_catalog' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='cache_discovered_catalog' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'cache_discovered_catalog' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'discovered_catalog' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'discovered_catalog' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='discovered_catalog' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'discovered_catalog' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='cached_schemas' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'cached_schemas' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'docker_runner' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'docker_runner' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='docker_runner' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'docker_runner' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='custom_environment_variables' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'custom_environment_variables' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='future_state' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
          request: <SubRequest 'future_state' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='future_state_configuration' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py'>
          request: <SubRequest 'future_state_configuration' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='test_strictness_level' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'test_strictness_level' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='pull_docker_image' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'pull_docker_image' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='image_tag' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'image_tag' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='base_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'base_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='cache_discovered_catalog' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'cache_discovered_catalog' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='custom_environment_variables' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'custom_environment_variables' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='test_strictness_level' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'test_strictness_level' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='pull_docker_image' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'pull_docker_image' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='image_tag' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'image_tag' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='base_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'base_path' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='cache_discovered_catalog' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'cache_discovered_catalog' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='custom_environment_variables' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'custom_environment_variables' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='pull_docker_image' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'pull_docker_image' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='image_tag' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'image_tag' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='base_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'base_path' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='cache_discovered_catalog' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'cache_discovered_catalog' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='custom_environment_variables' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'custom_environment_variables' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='pull_docker_image' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'pull_docker_image' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='acceptance_test_config' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'acceptance_test_config' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='base_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'base_path' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='acceptance_test_config' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'acceptance_test_config' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='base_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'base_path' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='acceptance_test_config' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'acceptance_test_config' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='base_path' scope='function' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'base_path' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='acceptance_test_config' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'acceptance_test_config' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='pytestconfig' scope='session' baseid=''>
          request: <SubRequest 'pytestconfig' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='connector_setup' scope='session' baseid=''>
          request: <SubRequest 'connector_setup' for <Function test_state_with_abnormally_large_values[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='cache_discovered_catalog' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'cache_discovered_catalog' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='cached_schemas' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'cached_schemas' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
          request: <SubRequest 'tmp_path_factory' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='custom_environment_variables' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'custom_environment_variables' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='pull_docker_image' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'pull_docker_image' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='acceptance_test_config' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'acceptance_test_config' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='pytestconfig' scope='session' baseid=''>
          request: <SubRequest 'pytestconfig' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='connector_setup' scope='session' baseid=''>
          request: <SubRequest 'connector_setup' for <Function test_read_sequential_slices[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='cache_discovered_catalog' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'cache_discovered_catalog' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='cached_schemas' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'cached_schemas' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
          request: <SubRequest 'tmp_path_factory' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='custom_environment_variables' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'custom_environment_variables' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='pull_docker_image' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'pull_docker_image' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='acceptance_test_config' scope='session' baseid='airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test'>
          request: <SubRequest 'acceptance_test_config' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='pytestconfig' scope='session' baseid=''>
          request: <SubRequest 'pytestconfig' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='connector_setup' scope='session' baseid=''>
          request: <SubRequest 'connector_setup' for <Function test_two_sequential_reads[inputs0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_terminal_summary [hook]
          terminalreporter: <pytest_sugar.SugarTerminalReporter object at 0x1034c0400>
          exitstatus: 2
          config: <_pytest.config.Config object at 0x101428190>
        pytest_report_teststatus [hook]
            report: <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_two_sequential_reads[inputs0]' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_report_teststatus --> ('failed', '\x1b[31m⨯\x1b[0m', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'airbyte-integrations/bases/connector-acceptance-test/connector_acceptance_test/tests/test_incremental.py::TestIncremental::test_read_sequential_slices[inputs0]' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x101428190>
        finish pytest_report_teststatus --> ('failed', '\x1b[31m⨯\x1b[0m', 'FAILED') [hook]
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x101428190>
    finish pytest_unconfigure --> [] [hook]
