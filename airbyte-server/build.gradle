plugins {
    id 'application'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

// This is published as a shadow jar as the Airbyte Server jar is currently used
// as a delivery mechanism for the common Airbyte libraries and clients. Proper
// publishing is blocked on some gradle work.
shadowJar {
    // following properties need to be set here to have reproducible shadow archives, doesn't seem to inherit from AbstractArchiveTask
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    zip64 true
    mergeServiceFiles()
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    // Not stubbing this out adds 'all' to the end of the jar's name.
    classifier = ''
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
    repositories {
        publications {
            // This block is present so Gradle knows to publish a Maven jar.
            maven(MavenPublication) {
                from components.java
                // Gradle will by default use the subproject path as the group id and the subproject name as the artifact id.
                // e.g. the subproject :airbyte-scheduler:models is imported at io.airbyte.airbyte-config:persistence:<version-number>.
            }
        }

        maven {
            credentials {
                name 'cloudrepo'
                username System.getenv('CLOUDREPO_USER')
                password System.getenv('CLOUDREPO_PASSWORD')
            }
            url 'https://airbyte.mycloudrepo.io/repositories/airbyte-public-jars'
        }

        mavenLocal()
    }
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:${rootProject.ext.micronaut_version}")
    annotationProcessor 'io.micronaut:micronaut-inject-java'
    annotationProcessor 'io.micronaut:micronaut-management'
    annotationProcessor 'io.micronaut:micronaut-validation'
    annotationProcessor 'io.micronaut.data:micronaut-data-processor:3.3.0'
    annotationProcessor 'io.micronaut.jaxrs:micronaut-jaxrs-processor:3.2.0'

    implementation platform("io.micronaut:micronaut-bom:${rootProject.ext.micronaut_version}")
    implementation 'io.micronaut:micronaut-inject'
    implementation 'io.swagger.core.v3:swagger-annotations'
    implementation 'io.micronaut:micronaut-validation'
    implementation 'io.micronaut:micronaut-runtime'
    implementation 'io.micronaut:micronaut-http-server-netty'
    implementation 'io.micronaut:micronaut-http-client'
    implementation 'io.micronaut:micronaut-management'
    implementation 'io.micronaut.security:micronaut-security:3.5.0'
    implementation 'io.micronaut.jaxrs:micronaut-jaxrs-server:3.2.0'
//    implementation 'io.micronaut.data:micronaut-data-hibernate-jpa:3.3.0'
    implementation 'io.micronaut.flyway:micronaut-flyway:5.2.0'
    implementation 'io.micronaut.sql:micronaut-jdbc-hikari'
    implementation 'io.micronaut.sql:micronaut-jooq'

    implementation 'com.vladmihalcea:hibernate-types-52:2.15.0'

    implementation 'javax.inject:javax.inject:1'
    implementation 'javax.transaction:javax.transaction-api:1.3'
    implementation 'io.projectreactor:reactor-core:3.4.16'

    implementation 'io.temporal:temporal-sdk:1.8.1'

    implementation 'org.apache.cxf:cxf-core:3.4.2'
    implementation 'commons-cli:commons-cli:1.4'
    implementation "org.flywaydb:flyway-core:7.14.0"
    implementation 'com.github.slugify:slugify:2.4'

    implementation project(':airbyte-analytics')
    implementation project(':airbyte-api')
    implementation project(':airbyte-commons-docker')
    implementation project(':airbyte-config:init')
    implementation project(':airbyte-config:models')
    implementation project(':airbyte-config:persistence')
    implementation project(':airbyte-config:specs')
    implementation project(':airbyte-db:lib')
    implementation project(":airbyte-json-validation")
    implementation project(':airbyte-notification')
    implementation project(':airbyte-oauth')
    implementation project(':airbyte-protocol:models')
    implementation project(':airbyte-scheduler:app')
    implementation project(':airbyte-scheduler:client')
    implementation project(':airbyte-scheduler:models')
    implementation project(':airbyte-scheduler:persistence')
    implementation project(':airbyte-workers')

    testAnnotationProcessor platform("io.micronaut:micronaut-bom:${rootProject.ext.micronaut_version}")
    testAnnotationProcessor 'io.micronaut:micronaut-inject-java'

    testImplementation "org.postgresql:postgresql:42.3.3"
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.3'
    testImplementation 'org.testcontainers:postgresql:1.16.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.16.3'
    testImplementation 'io.micronaut.test:micronaut-test-core:3.1.1'
    testImplementation 'io.micronaut.test:micronaut-test-junit5:3.1.1'
    testRuntimeOnly 'com.h2database:h2:2.1.210'
}

// we want to be able to access the generated db files from config/init when we build the server docker image.
task copySeed(type: Copy, dependsOn: [project(':airbyte-config:init').processResources]) {
    from "${project(':airbyte-config:init').buildDir}/resources/main/config"
    into "${buildDir}/config_init/resources/main/config"
}

// need to make sure that the files are in the resource directory before copying.
// tests require the seed to exist.
test.dependsOn(project.tasks.copySeed)
assemble.dependsOn(project.tasks.copySeed)

application {
//    mainClass = 'io.airbyte.api.invoker.Application'
    mainClass = 'io.airbyte.server.Application'
    applicationDefaultJvmArgs = ['-XX:+ExitOnOutOfMemoryError', '-XX:MaxRAMPercentage=75.0']
}

Properties env = new Properties()
rootProject.file('.env.dev').withInputStream { env.load(it) }

run {
    // default for running on local machine.
    env.each { entry ->
        println "${entry.getKey()} -> ${entry.getValue()}"
        environment entry.getKey(), entry.getValue()
    }

    environment 'RUN_DATABASE_MIGRATION_ON_STARTUP', 'true'
    environment 'AIRBYTE_ROLE', System.getenv('AIRBYTE_ROLE')
    environment 'AIRBYTE_VERSION', env.VERSION
    environment 'SERVICE_NAME', project.name
    environment 'MICRONAUT_ENVIRONMENTS', 'local'
}

task copyGeneratedTar(type: Copy) {
    dependsOn copyDocker
    dependsOn distTar

    from('build/distributions') {
        include 'airbyte-server-*.tar'
    }
    into 'build/docker/bin'
}

test {
//    testLogging.showStandardStreams = true
    env.each { entry ->
        environment entry.getKey(), entry.getValue()
    }
    environment 'MICRONAUT_ENVIRONMENTS', 'test'
    environment 'SERVICE_NAME', project.name
}

Task dockerBuildTask = getDockerBuildTask("server", "$project.projectDir")
dockerBuildTask.dependsOn(copyGeneratedTar)
assemble.dependsOn(dockerBuildTask)

// produce reproducible archives
// (see https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives)
tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}
