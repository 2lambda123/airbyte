{
  "type": "object",
  "title": "MySql Source Spec",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "required": [
    "host",
    "port",
    "database",
    "username",
    "replication_method"
  ],
  "properties": {
    "ssl": {
      "type": "boolean",
      "order": 6,
      "title": "SSL Connection",
      "default": true,
      "description": "Encrypt data using SSL."
    },
    "host": {
      "type": "string",
      "order": 0,
      "title": "Host",
      "description": "The host name of the database."
    },
    "port": {
      "type": "integer",
      "order": 1,
      "title": "Port",
      "default": 3306,
      "maximum": 65536,
      "minimum": 0,
      "examples": [
        "3306"
      ],
      "description": "The port to connect to."
    },
    "database": {
      "type": "string",
      "order": 2,
      "title": "Database",
      "description": "The database name."
    },
    "password": {
      "type": "string",
      "order": 4,
      "title": "Password",
      "description": "The password associated with the username.",
      "airbyte_secret": true
    },
    "username": {
      "type": "string",
      "order": 3,
      "title": "Username",
      "description": "The username which is used to access the database."
    },
    "tunnel_method": {
      "type": "object",
      "oneOf": [
        {
          "title": "No Tunnel",
          "required": [
            "tunnel_method"
          ],
          "properties": {
            "tunnel_method": {
              "type": "string",
              "const": "NO_TUNNEL",
              "order": 0,
              "description": "No ssh tunnel needed to connect to database"
            }
          }
        },
        {
          "title": "SSH Key Authentication",
          "required": [
            "tunnel_method",
            "tunnel_host",
            "tunnel_port",
            "tunnel_user",
            "ssh_key"
          ],
          "properties": {
            "ssh_key": {
              "type": "string",
              "order": 4,
              "title": "SSH Private Key",
              "multiline": true,
              "description": "OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )",
              "airbyte_secret": true
            },
            "tunnel_host": {
              "type": "string",
              "order": 1,
              "title": "SSH Tunnel Jump Server Host",
              "description": "Hostname of the jump server host that allows inbound ssh tunnel."
            },
            "tunnel_port": {
              "type": "integer",
              "order": 2,
              "title": "SSH Connection Port",
              "default": 22,
              "maximum": 65536,
              "minimum": 0,
              "examples": [
                "22"
              ],
              "description": "Port on the proxy/jump server that accepts inbound ssh connections."
            },
            "tunnel_user": {
              "type": "string",
              "order": 3,
              "title": "SSH Login Username",
              "description": "OS-level username for logging into the jump server host."
            },
            "tunnel_method": {
              "type": "string",
              "const": "SSH_KEY_AUTH",
              "order": 0,
              "description": "Connect through a jump server tunnel host using username and ssh key"
            }
          }
        },
        {
          "title": "Password Authentication",
          "required": [
            "tunnel_method",
            "tunnel_host",
            "tunnel_port",
            "tunnel_user",
            "tunnel_user_password"
          ],
          "properties": {
            "tunnel_host": {
              "type": "string",
              "order": 1,
              "title": "SSH Tunnel Jump Server Host",
              "description": "Hostname of the jump server host that allows inbound ssh tunnel."
            },
            "tunnel_port": {
              "type": "integer",
              "order": 2,
              "title": "SSH Connection Port",
              "default": 22,
              "maximum": 65536,
              "minimum": 0,
              "examples": [
                "22"
              ],
              "description": "Port on the proxy/jump server that accepts inbound ssh connections."
            },
            "tunnel_user": {
              "type": "string",
              "order": 3,
              "title": "SSH Login Username",
              "description": "OS-level username for logging into the jump server host"
            },
            "tunnel_method": {
              "type": "string",
              "const": "SSH_PASSWORD_AUTH",
              "order": 0,
              "description": "Connect through a jump server tunnel host using username and password authentication"
            },
            "tunnel_user_password": {
              "type": "string",
              "order": 4,
              "title": "Password",
              "description": "OS-level password for logging into the jump server host",
              "airbyte_secret": true
            }
          }
        }
      ],
      "title": "SSH Tunnel Method",
      "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use."
    },
    "jdbc_url_params": {
      "type": "string",
      "order": 5,
      "title": "JDBC URL Params",
      "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3)."
    },
    "replication_method": {
      "type": "object",
      "title": "Replication Method",
      "description": "Replication method to use for extracting data from the database.",
      "order": 7,
      "oneOf": [
        {
          "title": "STANDARD",
          "description": "Standard replication requires no setup on the DB side but will not be able to represent deletions incrementally.",
          "required": ["method"],
          "properties": {
            "method": {
              "type": "string",
              "const": "STANDARD",
              "enum": ["STANDARD"],
              "default": "STANDARD",
              "order": 0
            }
          }
        },
        {
          "title": "Logical Replication (CDC)",
          "description": "CDC uses the Binlog to detect inserts, updates, and deletes. This needs to be configured on the source database itself.",
          "required": ["method"],
          "properties": {
            "method": {
              "type": "string",
              "const": "CDC",
              "enum": ["CDC"],
              "default": "CDC",
              "order": 0
            }
          }
        }
      ]
    }
  }
}