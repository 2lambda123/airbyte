// Configure the gradle enterprise plugin to enable build scans. Enabling the plugin at the top of the settings file allows the build scan to record
// as much information as possible.
plugins {
    id "com.gradle.enterprise" version "3.4.1"
}

gradleEnterprise {
    buildScan {
        termsOfServiceUrl = "https://gradle.com/terms-of-service"
        termsOfServiceAgree = "yes"
    }
}

sourceControl {
    gitRepository("https://github.com/airbytehq/json-avro-converter.git") {
        producesModule("tech.allegro.schema.json2avro:converter")
    }
    gitRepository("https://github.com/airbytehq/jsongenerator.git") {
        producesModule("net.jimblackler:jsongenerator")
    }
}

rootProject.name = 'airbyte'


dependencyResolutionManagement {
    versionCatalogs {
        libs {
            version('fasterxml_version', '2.13.0')
            version('glassfish_version', '2.31')
            version('commons_io', '2.7')
            version('log4j', '2.17.1')
            version('slf4j', '1.7.30')
            version('lombok', '1.18.22')
            version('junit-jupiter', '5.7.2')

            library('fasterxml', 'com.fasterxml.jackson', 'jackson-bom').versionRef('fasterxml_version')
            library('glassfish', 'org.glassfish.jersey', 'jersey-bom').versionRef('glassfish_version')

            library('jackson-databind', 'com.fasterxml.jackson.core', 'jackson-databind').versionRef('fasterxml_version')
            library('jackson-annotations', 'com.fasterxml.jackson.core', 'jackson-annotations').versionRef('fasterxml_version')
            library('jackson-dataformat', 'com.fasterxml.jackson.dataformat', 'jackson-dataformat-yaml').versionRef('fasterxml_version')
            library('jackson-datatype', 'com.fasterxml.jackson.datatype', 'jackson-datatype-jsr310').versionRef('fasterxml_version')

            library('guava', 'com.google.guava', 'guava').version('30.1.1-jre')
            library('commons-io', 'commons-io', 'commons-io').versionRef('commons_io')

            library('apache-commons', 'org.apache.commons', 'commons-compress').version('1.20')
            library('apache-commons-lang', 'org.apache.commons', 'commons-lang3').version('3.11')

            library('slf4j-api', 'org.slf4j', 'slf4j-api').version('1.7.30')

            // SLF4J as a facade over Log4j2 required dependencies
            library('log4j-api', 'org.apache.logging.log4j', 'log4j-api').versionRef('log4j')
            library('log4j-core', 'org.apache.logging.log4j', 'log4j-core').versionRef('log4j')
            library('log4j-impl', 'org.apache.logging.log4j', 'log4j-slf4j-impl').versionRef('log4j')
            library('log4j-web', 'org.apache.logging.log4j', 'log4j-web').versionRef('log4j')

            // Bridges from other logging implementations to SLF4J
            library('jul-to-slf4j', 'org.slf4j', 'jul-to-slf4j').versionRef('slf4j')
            library('jcl-over-slf4j', 'org.slf4j', 'jcl-over-slf4j').versionRef('slf4j')
            library('log4j-over-slf4j', 'org.slf4j', 'log4j-over-slf4j').versionRef('slf4j')

            // Dependencies for logging to cloud storage, as well as the various clients used to do so.
            library('appender-log4j2', 'com.therealvan', 'appender-log4j2').version('3.6.0')
            library('aws-java-sdk-s3', 'com.amazonaws', 'aws-java-sdk-s3').version('1.12.6')
            library('google-cloud-storage', 'com.google.cloud', 'google-cloud-storage').version('2.2.2')
            library('s3', 'software.amazon.awssdk', 's3').version('2.16.84')

            // Lombok dependencies
            library('lombok', 'org.projectlombok', 'lombok').versionRef('lombok')

            library('junit-jupiter-engine', 'org.junit.jupiter', 'junit-jupiter-engine').versionRef('junit-jupiter')
            library('junit-jupiter-api', 'org.junit.jupiter', 'junit-jupiter-api').versionRef('junit-jupiter')
            library('junit-jupiter-params', 'org.junit.jupiter', 'junit-jupiter-params').versionRef('junit-jupiter')

            library('mockito-junit-jupiter', 'org.mockito', 'mockito-junit-jupiter').version('4.0.0')
            library('assertj-core', 'org.assertj', 'assertj-core').version('3.21.0')
            library('junit-pioneer', 'org.junit-pioneer', 'junit-pioneer').version('1.6.2')

            // adds owasp plugin
            library('findsecbugs-plugin', 'com.h3xstream.findsecbugs', 'findsecbugs-plugin').version('1.11.0')

            // jackson bundle
            bundle('jackson', ['jackson-databind', 'jackson-annotations', 'jackson-dataformat', 'jackson-datatype'])

            // apache bundle
            bundle('apache', ['apache-commons', 'apache-commons-lang'])

            // log4j bundle
            bundle('log4j', ['log4j-api', 'log4j-core', 'log4j-impl', 'log4j-web'])

            // slf4j bundle
            bundle('slf4j', ['jul-to-slf4j', 'jcl-over-slf4j', 'log4j-over-slf4j'])

            // junit bundle
            bundle('junit', ['junit-jupiter-api', 'junit-jupiter-params', 'mockito-junit-jupiter'])
        }
    }
}

// SUB_BUILD is an enum of <blank>, PLATFORM, CONNECTORS_BASE, ALL_CONNECTORS and OCTAVIA_CLI. Blank is equivalent to all.
if (!System.getenv().containsKey("SUB_BUILD")) {
    println("Building all of Airbyte.")
} else {
    def subBuild = System.getenv().get("SUB_BUILD")
    println("Building Airbyte Sub Build: " + subBuild)
    if (subBuild != "PLATFORM" && subBuild != "CONNECTORS_BASE" && subBuild != "ALL_CONNECTORS" && subBuild != "OCTAVIA_CLI") {
        throw new IllegalArgumentException(String.format("%s is invalid. Must be unset or PLATFORM or CONNECTORS_BASE, ALL_CONNECTORS or OCTAVIA_CLI", subBuild))
    }
}

// shared
include ':airbyte-commons'

// shared by CONNECTORS_BASE and PLATFORM sub builds
include ':airbyte-api'
include ':airbyte-commons-cli'
include ':airbyte-commons-docker'
include ':airbyte-config:models' // reused by acceptance tests in connector base.
include ':airbyte-db:lib' // reused by acceptance tests in connector base.
include ':airbyte-json-validation'
include ':airbyte-metrics:lib'
include ':airbyte-oauth'
include ':airbyte-protocol:models'
include ':airbyte-queue'
include ':airbyte-test-utils'

// airbyte-workers has a lot of dependencies.
include ':airbyte-workers' // reused by acceptance tests in connector base.
include ':airbyte-analytics' // transitively used by airbyte-workers.
include ':airbyte-config:persistence' // transitively used by airbyte-workers.
include ':airbyte-db:jooq' // transitively used by airbyte-workers.
include ':airbyte-notification' // transitively used by airbyte-workers.
include ':airbyte-scheduler:models' // transitively used by airbyte-workers.
include ':airbyte-scheduler:persistence' // used by airbyte-workers.

// platform
if (!System.getenv().containsKey("SUB_BUILD") || System.getenv().get("SUB_BUILD") == "PLATFORM") {
    include ':airbyte-bootloader'
    include ':airbyte-cli'
    include ':airbyte-config:init'
    include ':airbyte-config:specs'
    include ':airbyte-container-orchestrator'
    include ':airbyte-metrics:reporter'
    include ':airbyte-scheduler:app'
    include ':airbyte-scheduler:client'
    include ':airbyte-server'
    include ':airbyte-temporal'
    include ':airbyte-tests'
    include ':airbyte-webapp'
    include ':airbyte-webapp-e2e-tests'
}

// connectors base
if (!System.getenv().containsKey("SUB_BUILD") || System.getenv().get("SUB_BUILD") == "CONNECTORS_BASE" || System.getenv().get("SUB_BUILD") == "ALL_CONNECTORS") {
    include ':airbyte-cdk:python'
    include ':airbyte-integrations:bases:airbyte-protocol'
    include ':airbyte-integrations:bases:base'
    include ':airbyte-integrations:bases:base-java'
    include ':airbyte-integrations:bases:base-normalization'
    include ':airbyte-integrations:bases:base-python'
    include ':airbyte-integrations:bases:base-python-test'
    include ':airbyte-integrations:bases:base-singer'
    include ':airbyte-integrations:bases:base-standard-source-test-file'
    include ':airbyte-integrations:bases:source-acceptance-test'
    include ':airbyte-integrations:bases:standard-destination-test'
    include ':airbyte-integrations:bases:standard-source-test'
    include ':airbyte-integrations:connector-templates:generator'
    include ':airbyte-integrations:bases:debezium'

    // Needed by normalization integration tests
    include ':airbyte-integrations:connectors:destination-bigquery'
    include ':airbyte-integrations:connectors:destination-jdbc'
    include ':airbyte-integrations:connectors:destination-mysql'
    include ':airbyte-integrations:connectors:destination-postgres'
    include ':airbyte-integrations:connectors:destination-redshift'
    include ':airbyte-integrations:connectors:destination-snowflake'
    include ':airbyte-integrations:connectors:destination-oracle'
    include ':airbyte-integrations:connectors:destination-mssql'
    include ':airbyte-integrations:connectors:destination-clickhouse'

    //Needed by destination-bigquery
    include ':airbyte-integrations:connectors:destination-s3'
    include ':airbyte-integrations:connectors:destination-gcs'

    include ':tools:code-generator'
}

if (!System.getenv().containsKey("SUB_BUILD") || System.getenv().get("SUB_BUILD") == "OCTAVIA_CLI") {
    include ':octavia-cli'
}

// connectors
if (!System.getenv().containsKey("SUB_BUILD") || System.getenv().get("SUB_BUILD") == "ALL_CONNECTORS") {
    // include all connector projects
    def integrationsPath = rootDir.toPath().resolve('airbyte-integrations/connectors')
    println integrationsPath
    integrationsPath.eachDir { dir ->
        def buildFiles = file(dir).list { file, name -> name == "build.gradle" }

        if (buildFiles.length == 1) {
            include ":airbyte-integrations:connectors:${dir.getFileName()}"
        }
    }
}
