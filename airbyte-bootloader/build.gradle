plugins {
    id 'application'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:${rootProject.ext.micronaut_version}")
    annotationProcessor 'io.micronaut:micronaut-inject-java'
    annotationProcessor 'io.micronaut:micronaut-management'
    annotationProcessor 'io.micronaut:micronaut-validation'

    implementation platform("io.micronaut:micronaut-bom:${rootProject.ext.micronaut_version}")
    implementation 'io.micronaut:micronaut-inject'
    implementation 'io.micronaut:micronaut-validation'
    implementation 'io.micronaut:micronaut-runtime'
    implementation 'io.micronaut:micronaut-http-server-netty'
    implementation 'io.micronaut:micronaut-http-client'
    implementation 'io.micronaut:micronaut-management'
    implementation 'io.micronaut.flyway:micronaut-flyway:5.2.0'
    implementation 'io.micronaut.sql:micronaut-jdbc-hikari'
    implementation 'io.micronaut.sql:micronaut-jooq'

    implementation 'javax.inject:javax.inject:1'

    implementation project(':airbyte-config:init')
    implementation project(':airbyte-config:models')
    implementation project(':airbyte-config:persistence')
    implementation project(':airbyte-db:jooq')
    implementation project(':airbyte-db:lib')
    implementation project(":airbyte-json-validation")
    implementation project(':airbyte-scheduler:persistence')
    implementation project(':airbyte-scheduler:models')

    implementation 'io.temporal:temporal-sdk:1.8.1'

    runtimeOnly 'org.postgresql:postgresql:42.3.3'

    testAnnotationProcessor platform("io.micronaut:micronaut-bom:${rootProject.ext.micronaut_version}")
    testAnnotationProcessor 'io.micronaut:micronaut-inject-java'

    testImplementation 'org.testcontainers:postgresql:1.16.3'
    testImplementation 'uk.org.webcompere:system-stubs-jupiter:1.2.0'
    testImplementation 'org.testcontainers:junit-jupiter:1.16.3'
    testImplementation 'io.micronaut.test:micronaut-test-core:3.1.1'
    testImplementation 'io.micronaut.test:micronaut-test-junit5:3.1.1'
    testRuntimeOnly 'com.h2database:h2:2.1.210'
}

application {
    applicationName = project.name
    mainClass = 'io.airbyte.bootloader.Application' //'io.airbyte.bootloader.BootloaderApp'
    applicationDefaultJvmArgs = ['-XX:+ExitOnOutOfMemoryError', '-XX:MaxRAMPercentage=75.0']
}

Properties env = new Properties()
rootProject.file('.env.dev').withInputStream { env.load(it) }

// Publish this so Airbyte Cloud can consume and extend the classes within this jar.
// This needs to be a shadow jar as none of the other modules are published.
shadowJar {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    zip64 true
    mergeServiceFiles()
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    // Not stubbing this out adds 'all' to the end of the jar's name.
    classifier = ''
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }

    repositories {
        publications {
            // This block is present so Gradle knows to publish a Maven jar.
            maven(MavenPublication) {
                from components.java
                // Gradle will by default use the subproject path as the group id and the subproject name as the artifact id.
                // e.g. the subproject :airbyte-scheduler:models is imported at io.airbyte.airbyte-config:persistence:<version-number>.
            }
        }

        maven {
            credentials {
                name 'cloudrepo'
                username System.getenv('CLOUDREPO_USER')
                password System.getenv('CLOUDREPO_PASSWORD')
            }
            url 'https://airbyte.mycloudrepo.io/repositories/airbyte-public-jars'
        }

        mavenLocal()
    }
}

run {
    // default for running on local machine.
    environment 'DATABASE_USER', env.DATABASE_USER
    environment 'DATABASE_PASSWORD', env.DATABASE_PASSWORD
    environment 'DATABASE_URL', env.DATABASE_URL

    environment 'AIRBYTE_VERSION', env.VERSION
    environment 'MICRONAUT_ENVIRONMENTS', 'local'
    environment 'SERVICE_NAME', project.name
}

task copyGeneratedTar(type: Copy) {
    dependsOn copyDocker
    dependsOn distTar

    from('build/distributions') {
        include 'airbyte-bootloader-*.tar'
    }
    into 'build/docker/bin'
}

Task dockerBuildTask = getDockerBuildTask("bootloader",  "$project.projectDir")
dockerBuildTask.dependsOn(copyGeneratedTar)
assemble.dependsOn(dockerBuildTask)

// produce reproducible archives
// (see https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives)
tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}
